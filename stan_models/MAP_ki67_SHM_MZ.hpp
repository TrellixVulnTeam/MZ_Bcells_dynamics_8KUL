
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace MAP_ki67_SHM_MZ_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 325> locations_array__ = 
{" (found before start of program)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 240, column 2 to column 36)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 241, column 2 to column 35)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 242, column 2 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 243, column 2 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 244, column 2 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 245, column 2 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 248, column 2 to column 33)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 249, column 2 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 250, column 2 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 251, column 2 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 255, column 2 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 256, column 2 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 257, column 2 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 258, column 2 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 259, column 2 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 260, column 2 to column 38)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 262, column 2 to column 33)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 263, column 2 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 264, column 2 to column 29)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 265, column 2 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 267, column 2 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 269, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 270, column 2 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 271, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 272, column 2 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 273, column 2 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 274, column 2 to column 29)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 277, column 2 to column 80)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 280, column 4 to column 41)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 281, column 4 to column 41)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 282, column 4 to column 41)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 283, column 4 to column 37)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 279, column 23 to line 284, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 279, column 2 to line 284, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 286, column 2 to column 55)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 287, column 2 to column 46)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 288, column 2 to column 51)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 289, column 2 to column 50)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 315, column 2 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 316, column 2 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 317, column 2 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 2 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 31 to column 59)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 60 to column 88)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 89 to column 117)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 2 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 31 to column 59)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 60 to column 88)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 89 to column 117)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 2 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 31 to column 59)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 60 to column 88)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 89 to column 117)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 2 to column 32)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 33 to column 57)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 58 to column 86)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 87 to column 114)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 2 to column 32)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 33 to column 57)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 58 to column 86)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 87 to column 114)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 2 to column 32)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 33 to column 57)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 58 to column 86)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 87 to column 114)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 2 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 27 to column 51)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 52 to column 76)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 77 to column 101)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 332, column 2 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 332, column 25 to column 46)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 335, column 2 to column 20)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 336, column 2 to column 21)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 337, column 2 to column 21)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 338, column 2 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 339, column 2 to column 36)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 342, column 2 to column 89)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 343, column 2 to column 89)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 344, column 2 to column 89)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 347, column 4 to column 101)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 348, column 4 to column 101)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 349, column 4 to column 101)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 351, column 4 to column 113)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 352, column 4 to column 113)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 353, column 4 to column 113)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 355, column 4 to column 81)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 356, column 4 to column 81)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 357, column 4 to column 81)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 359, column 4 to column 81)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 360, column 4 to column 81)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 361, column 4 to column 81)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 363, column 4 to column 82)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 364, column 4 to column 82)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 365, column 4 to column 82)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 367, column 4 to column 88)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 368, column 4 to column 88)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 369, column 4 to column 88)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 371, column 4 to column 96)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 372, column 4 to column 96)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 373, column 4 to column 96)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 375, column 4 to column 95)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 376, column 4 to column 95)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 377, column 4 to column 95)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 346, column 22 to line 378, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 346, column 2 to line 378, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 383, column 4 to column 77)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 384, column 4 to column 77)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 385, column 4 to column 87)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 386, column 4 to column 85)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 382, column 22 to line 387, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 382, column 2 to line 387, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 294, column 2 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 295, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 296, column 2 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 297, column 2 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 298, column 2 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 299, column 2 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 301, column 2 to column 34)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 302, column 2 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 303, column 2 to column 32)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 304, column 2 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 307, column 2 to column 65)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 308, column 2 to column 68)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 309, column 2 to column 83)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 310, column 2 to column 80)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 205, column 2 to column 15)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 206, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 208, column 2 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 209, column 29 to column 35)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 209, column 2 to column 37)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 210, column 29 to column 37)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 210, column 2 to column 39)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 211, column 15 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 211, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 212, column 25 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 212, column 2 to column 33)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 213, column 22 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 213, column 2 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 214, column 27 to column 33)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 214, column 2 to column 35)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 215, column 26 to column 32)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 215, column 2 to column 34)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 216, column 16 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 216, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 217, column 16 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 217, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 218, column 16 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 218, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 219, column 16 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 219, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 220, column 16 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 220, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 221, column 16 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 221, column 2 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 225, column 10 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 225, column 2 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 226, column 11 to column 19)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 226, column 2 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 229, column 25 to column 33)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 229, column 2 to column 35)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 233, column 3 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 234, column 3 to column 29)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 232, column 23 to line 235, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 232, column 2 to line 235, column 3)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 256, column 9 to column 17)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 257, column 9 to column 17)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 258, column 9 to column 17)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 259, column 9 to column 17)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 260, column 10 to column 20)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 260, column 9 to column 21)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 262, column 25 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 263, column 16 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 264, column 21 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 265, column 20 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 315, column 19 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 316, column 19 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 317, column 19 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 21 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 50 to column 57)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 79 to column 86)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 320, column 108 to column 115)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 21 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 50 to column 57)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 79 to column 86)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 321, column 108 to column 115)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 21 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 50 to column 57)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 79 to column 86)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 322, column 108 to column 115)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 23 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 48 to column 55)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 77 to column 84)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 325, column 105 to column 112)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 23 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 48 to column 55)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 77 to column 84)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 326, column 105 to column 112)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 23 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 48 to column 55)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 77 to column 84)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 327, column 105 to column 112)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 9 to column 15)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 34 to column 40)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 59 to column 65)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 330, column 84 to column 90)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 5, column 6 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 5, column 26 to column 46)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 7, column 6 to column 17)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 8, column 6 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 12, column 6 to column 49)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 13, column 6 to column 19)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 3, column 30 to line 14, column 4)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 17, column 5 to column 29)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 18, column 17 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 18, column 5 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 21, column 7 to column 41)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 20, column 24 to line 22, column 6)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 20, column 5 to line 22, column 6)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 24, column 5 to column 19)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 16, column 29 to line 25, column 4)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 30, column 6 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 30, column 26 to column 44)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 32, column 7 to column 16)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 38, column 9 to column 48)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 37, column 14 to line 39, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 36, column 9 to column 17)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 35, column 20 to line 37, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 35, column 7 to line 39, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 41, column 9 to column 20)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 28, column 30 to line 42, column 5)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 48, column 5 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 49, column 5 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 50, column 5 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 51, column 5 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 53, column 5 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 53, column 28 to column 49)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 56, column 5 to column 30)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 59, column 5 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 61, column 5 to column 145)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 62, column 5 to column 136)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 64, column 5 to column 148)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 65, column 5 to column 139)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 67, column 5 to column 17)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 45, column 78 to line 68, column 4)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 72, column 5 to column 111)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 70, column 69 to line 73, column 5)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 80, column 7 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 81, column 7 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 83, column 7 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 84, column 7 to column 23)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 86, column 7 to column 32)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 87, column 7 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 93, column 9 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 92, column 14 to line 94, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 91, column 9 to column 53)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 90, column 27 to line 92, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 90, column 7 to line 94, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 97, column 7 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 98, column 7 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 99, column 7 to column 34)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 100, column 7 to column 34)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 102, column 7 to column 119)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 104, column 7 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 78, column 18 to line 105, column 6)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 112, column 7 to column 37)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 113, column 20 to column 26)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 113, column 7 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 116, column 9 to column 78)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 115, column 27 to line 117, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 115, column 7 to line 117, column 8)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 119, column 7 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 110, column 18 to line 120, column 6)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 124, column 6 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 125, column 6 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 126, column 6 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 127, column 6 to column 34)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 130, column 6 to column 33)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 131, column 6 to column 38)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 132, column 6 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 135, column 6 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 136, column 6 to column 27)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 137, column 6 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 138, column 6 to column 29)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 139, column 6 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 140, column 6 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 142, column 13 to column 16)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 142, column 6 to column 33)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 145, column 6 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 146, column 6 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 147, column 6 to column 34)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 148, column 6 to column 40)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 153, column 6 to column 88)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 154, column 6 to column 82)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 155, column 6 to column 54)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 156, column 6 to column 53)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 158, column 6 to column 53)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 159, column 6 to column 51)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 160, column 6 to column 42)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 161, column 6 to column 97)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 162, column 6 to column 40)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 163, column 6 to column 39)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 165, column 6 to column 28)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 122, column 88 to line 166, column 5)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 170, column 7 to column 16)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 172, column 7 to column 31)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 174, column 7 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 169, column 30 to line 175, column 6)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 179, column 5 to column 25)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 180, column 17 to column 22)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 180, column 5 to column 24)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 181, column 5 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 184, column 7 to column 44)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 183, column 24 to line 185, column 6)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 183, column 5 to line 185, column 6)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 186, column 5 to column 19)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 178, column 34 to line 187, column 4)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 190, column 5 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 192, column 5 to column 41)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 193, column 5 to column 19)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 189, column 29 to line 194, column 4)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 197, column 5 to column 18)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 199, column 5 to column 34)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 200, column 5 to column 19)",
 " (in 'MZ_New_dynamics/models/MAP_ki67_SHM_MZ.stan', line 196, column 28 to line 201, column 4)"};


template <typename T0__>
stan::promote_args_t<T0__>
theta_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ nu;
    nu = DUMMY_VAR__;
    
    current_statement__ = 206;
    nu = 1.86e-03;
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 207;
    theta0 = 14.36;
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    int t0;
    t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 209;
    t0 = 40;
    current_statement__ = 210;
    theta = (stan::math::exp(theta0) * stan::math::exp((-nu * (time - t0))));
    current_statement__ = 211;
    return theta;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return theta_spline(time, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
thet_s(const std::vector<T0__>& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int numdim;
    numdim = std::numeric_limits<int>::min();
    
    current_statement__ = 213;
    numdim = size(time);
    current_statement__ = 214;
    validate_non_negative_index("answer", "numdim", numdim);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(numdim, DUMMY_VAR__);
    
    current_statement__ = 218;
    for (int i = 1; i <= numdim; ++i) {
      current_statement__ = 216;
      assign(answer,
        theta_spline(rvalue(time, "time", index_uni(i)), pstream__),
        "assigning variable answer", index_uni(i));}
    current_statement__ = 219;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct thet_s_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& time, std::ostream* pstream__)  const 
{
return thet_s(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 221;
    chiEst = 0.76;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 222;
    qEst = 0.094;
    local_scalar_t__ chi;
    chi = DUMMY_VAR__;
    
    current_statement__ = 228;
    if (logical_lt(time, 0)) {
      current_statement__ = 226;
      chi = 0;
    } else {
      current_statement__ = 224;
      chi = (chiEst * (1 - stan::math::exp((-qEst * time))));
    }
    current_statement__ = 229;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_spline(time, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
shm(const T0__& time, const std::vector<T1__>& k,
    const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
    const std::vector<int>& idata, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    current_statement__ = 231;
    psi = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 232;
    rho = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ lambda;
    lambda = DUMMY_VAR__;
    
    current_statement__ = 233;
    lambda = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ Beta;
    Beta = DUMMY_VAR__;
    
    current_statement__ = 234;
    Beta = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ eps_donor;
    eps_donor = DUMMY_VAR__;
    
    current_statement__ = 235;
    eps_donor = 0.99;
    local_scalar_t__ eps_host;
    eps_host = DUMMY_VAR__;
    
    current_statement__ = 236;
    eps_host = 0.95;
    local_scalar_t__ ageAtBMT;
    ageAtBMT = DUMMY_VAR__;
    
    current_statement__ = 237;
    ageAtBMT = rvalue(parms, "parms", index_uni(5));
    std::vector<local_scalar_t__> dkdt;
    dkdt = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    current_statement__ = 239;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           Chi_spline((time - ageAtBMT), pstream__)) * eps_donor) +
         (rho *
           ((2 * rvalue(k, "k", index_uni(2))) +
             rvalue(k, "k", index_uni(1))))) -
        (((1 / Beta) + (lambda + rho)) * rvalue(k, "k", index_uni(1)))),
      "assigning variable dkdt", index_uni(1));
    current_statement__ = 240;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           Chi_spline((time - ageAtBMT), pstream__)) * (1 - eps_donor)) +
         ((1 / Beta) * rvalue(k, "k", index_uni(1)))) -
        ((rho + (lambda + rho)) * rvalue(k, "k", index_uni(2)))),
      "assigning variable dkdt", index_uni(2));
    current_statement__ = 241;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           (1 - Chi_spline((time - ageAtBMT), pstream__))) * eps_host) +
         (rho *
           ((2 * rvalue(k, "k", index_uni(4))) +
             rvalue(k, "k", index_uni(3))))) -
        (((1 / Beta) + (lambda + rho)) * rvalue(k, "k", index_uni(3)))),
      "assigning variable dkdt", index_uni(3));
    current_statement__ = 242;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           (1 - Chi_spline((time - ageAtBMT), pstream__))) * (1 - eps_host))
         + ((1 / Beta) * rvalue(k, "k", index_uni(3)))) -
        ((rho + (lambda + rho)) * rvalue(k, "k", index_uni(4)))),
      "assigning variable dkdt", index_uni(4));
    current_statement__ = 243;
    return dkdt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct shm_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& time, const std::vector<T1__>& k,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__)  const 
{
return shm(time, k, parms, rdata, idata, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
solve_shm(const T0__& solve_time, const std::vector<T1__>& init_cond,
          const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 245;
    return to_array_1d(
             integrate_ode_rk45(shm_functor__(), init_cond, 40.0,
               rep_array(solve_time, 1), parms, std::vector<double>{0.0},
               std::vector<int>{0}, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_shm_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const T0__& solve_time, const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_shm(solve_time, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
solve_chi(const T0__& solve_time, const T1__& ageAtBMT,
          const std::vector<T2__>& init_cond, const std::vector<T3__>& parms,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> y0;
    y0 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> init_tb;
    init_tb = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    current_statement__ = 251;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 252;
    assign(params, ageAtBMT, "assigning variable params", index_uni(5));
    current_statement__ = 257;
    if (logical_gt(ageAtBMT, 40.0)) {
      current_statement__ = 255;
      assign(y0, solve_shm(ageAtBMT, init_cond, params, pstream__),
        "assigning variable y0");
    } else {
      current_statement__ = 253;
      assign(y0, init_cond, "assigning variable y0");
    }
    current_statement__ = 258;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(1));
    current_statement__ = 259;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(2));
    current_statement__ = 260;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(1)) + rvalue(y0, "y0", index_uni(3))),
      "assigning variable init_tb", index_uni(3));
    current_statement__ = 261;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(2)) + rvalue(y0, "y0", index_uni(4))),
      "assigning variable init_tb", index_uni(4));
    current_statement__ = 262;
    assign(y_solve,
      to_array_1d(
        integrate_ode_rk45(shm_functor__(), init_tb, ageAtBMT,
          rep_array(solve_time, 1), params, std::vector<double>{0.0},
          std::vector<int>{0}, pstream__)), "assigning variable y_solve");
    current_statement__ = 263;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& solve_time, const T1__& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_chi(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
solve_ode_chi(const std::vector<T0__>& solve_time,
              const std::vector<T1__>& ageAtBMT,
              const std::vector<T2__>& init_cond,
              const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int numdim;
    numdim = std::numeric_limits<int>::min();
    
    current_statement__ = 265;
    numdim = size(solve_time);
    current_statement__ = 266;
    validate_non_negative_index("y_solve", "numdim", numdim);
    std::vector<std::vector<local_scalar_t__>> y_solve;
    y_solve = std::vector<std::vector<local_scalar_t__>>(numdim, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 270;
    for (int i = 1; i <= numdim; ++i) {
      current_statement__ = 268;
      assign(y_solve,
        solve_chi(rvalue(solve_time, "solve_time", index_uni(i)),
          rvalue(ageAtBMT, "ageAtBMT", index_uni(i)), init_cond,
          parms, pstream__), "assigning variable y_solve", index_uni(i));}
    current_statement__ = 271;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ode_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>>
operator()(const std::vector<T0__>& solve_time,
           const std::vector<T1__>& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_ode_chi(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
math_reduce(const T0__& global_params_arg__, const T1__& local_params_arg__,
            const std::vector<T2__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  int current_statement__ = 0; 
  const auto& global_params = to_ref(global_params_arg__);
  const auto& local_params = to_ref(local_params_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 273;
    n = size(x_i);
    local_scalar_t__ solve_time;
    solve_time = DUMMY_VAR__;
    
    current_statement__ = 274;
    solve_time = rvalue(x_r, "x_r", index_uni(1));
    int ageAtBMT;
    ageAtBMT = std::numeric_limits<int>::min();
    
    current_statement__ = 275;
    ageAtBMT = rvalue(x_i, "x_i", index_uni(1));
    local_scalar_t__ tb_time;
    tb_time = DUMMY_VAR__;
    
    current_statement__ = 276;
    tb_time = (ageAtBMT / 1.0);
    local_scalar_t__ N0;
    N0 = DUMMY_VAR__;
    
    current_statement__ = 277;
    N0 = rvalue(global_params, "global_params", index_uni(5));
    local_scalar_t__ kappa_0;
    kappa_0 = DUMMY_VAR__;
    
    current_statement__ = 278;
    kappa_0 = rvalue(global_params, "global_params", index_uni(6));
    std::vector<local_scalar_t__> init_cond;
    init_cond = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> chi_solve;
    chi_solve = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    local_scalar_t__ chi_counts_mean;
    chi_counts_mean = DUMMY_VAR__;
    
    local_scalar_t__ host_counts_mean;
    host_counts_mean = DUMMY_VAR__;
    
    local_scalar_t__ donor_counts_mean;
    donor_counts_mean = DUMMY_VAR__;
    
    local_scalar_t__ host_ki_mean;
    host_ki_mean = DUMMY_VAR__;
    
    local_scalar_t__ donor_ki_mean;
    donor_ki_mean = DUMMY_VAR__;
    
    current_statement__ = 286;
    validate_non_negative_index("y_mean_stacked", "4 * n", (4 * n));
    Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
    y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>((4 * n));
    stan::math::fill(y_mean_stacked, DUMMY_VAR__);
    
    current_statement__ = 288;
    assign(init_cond, 0.0, "assigning variable init_cond", index_uni(1));
    current_statement__ = 289;
    assign(init_cond, 0.0, "assigning variable init_cond", index_uni(2));
    current_statement__ = 290;
    assign(init_cond, (kappa_0 * N0),
      "assigning variable init_cond", index_uni(3));
    current_statement__ = 291;
    assign(init_cond, ((1 - kappa_0) * N0),
      "assigning variable init_cond", index_uni(4));
    current_statement__ = 292;
    assign(chi_solve,
      solve_chi(solve_time, tb_time, init_cond,
        to_array_1d(global_params), pstream__),
      "assigning variable chi_solve");
    current_statement__ = 293;
    chi_counts_mean = (((rvalue(chi_solve, "chi_solve", index_uni(1)) +
                          rvalue(chi_solve, "chi_solve", index_uni(2))) +
                         rvalue(chi_solve, "chi_solve", index_uni(3))) +
                        rvalue(chi_solve, "chi_solve", index_uni(4)));
    current_statement__ = 294;
    donor_counts_mean = (rvalue(chi_solve, "chi_solve", index_uni(1)) +
                          rvalue(chi_solve, "chi_solve", index_uni(2)));
    current_statement__ = 295;
    host_counts_mean = (rvalue(chi_solve, "chi_solve", index_uni(3)) +
                         rvalue(chi_solve, "chi_solve", index_uni(4)));
    current_statement__ = 296;
    donor_ki_mean = (rvalue(chi_solve, "chi_solve", index_uni(1)) /
                      donor_counts_mean);
    current_statement__ = 297;
    host_ki_mean = (rvalue(chi_solve, "chi_solve", index_uni(3)) /
                     host_counts_mean);
    current_statement__ = 298;
    assign(y_mean_stacked, chi_counts_mean,
      "assigning variable y_mean_stacked", index_uni(1));
    current_statement__ = 299;
    assign(y_mean_stacked,
      (donor_counts_mean /
        (chi_counts_mean * Chi_spline((solve_time - tb_time), pstream__))),
      "assigning variable y_mean_stacked", index_uni(2));
    current_statement__ = 300;
    assign(y_mean_stacked, donor_ki_mean,
      "assigning variable y_mean_stacked", index_uni(3));
    current_statement__ = 301;
    assign(y_mean_stacked, host_ki_mean,
      "assigning variable y_mean_stacked", index_uni(4));
    current_statement__ = 302;
    return y_mean_stacked;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct math_reduce_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>, -1, 1>
operator()(const T0__& global_params, const T1__& local_params,
           const std::vector<T2__>& x_r, const std::vector<int>& x_i,
           std::ostream* pstream__)  const 
{
return math_reduce(global_params, local_params, x_r, x_i, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
logit_inverse(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ ans;
    ans = DUMMY_VAR__;
    
    current_statement__ = 305;
    ans = (stan::math::exp(x) / (1 + stan::math::exp(x)));
    current_statement__ = 306;
    return ans;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_inverse_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return logit_inverse(x, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
asinsqrt_array(const std::vector<T0__>& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndims;
    ndims = std::numeric_limits<int>::min();
    
    current_statement__ = 308;
    ndims = size(x);
    current_statement__ = 309;
    validate_non_negative_index("answer", "ndims", ndims);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
    
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 311;
    a = 1.2;
    current_statement__ = 314;
    for (int i = 1; i <= ndims; ++i) {
      current_statement__ = 312;
      assign(answer,
        stan::math::asin(
          (stan::math::sqrt(rvalue(x, "x", index_uni(i))) /
            stan::math::sqrt(a))), "assigning variable answer", index_uni(i));
    }
    current_statement__ = 315;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_array_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& x, std::ostream* pstream__)  const 
{
return asinsqrt_array(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_real(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 317;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 318;
    answer = stan::math::asin((stan::math::sqrt(x) / stan::math::sqrt(a)));
    current_statement__ = 319;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_real_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_real(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
asinsqrt_inv(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 321;
    a = 1.2;
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    current_statement__ = 322;
    answer = (a * pow(stan::math::sin(x), 2));
    current_statement__ = 323;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct asinsqrt_inv_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return asinsqrt_inv(x, pstream__);
}
};

class MAP_ki67_SHM_MZ_model final : public model_base_crtp<MAP_ki67_SHM_MZ_model> {

 private:
  int n_shards;
  int numObs;
  int numPred;
  std::vector<int> time_index;
  std::vector<double> solve_time;
  std::vector<int> ageAtBMT;
  std::vector<double> counts;
  std::vector<double> Nfd;
  std::vector<double> ki_donor;
  std::vector<double> ki_host;
  std::vector<double> ts_pred1;
  std::vector<double> ts_pred2;
  std::vector<double> ts_pred3;
  std::vector<double> tb_pred1;
  std::vector<double> tb_pred2;
  std::vector<double> tb_pred3;
  std::vector<std::vector<int>> x_i;
  std::vector<std::vector<double>> x_r;
  std::vector<Eigen::Matrix<double, -1, 1>> local_params;
  int y_mean_stacked_1dim__;
 
 public:
  ~MAP_ki67_SHM_MZ_model() { }
  
  inline std::string model_name() const final { return "MAP_ki67_SHM_MZ_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  MAP_ki67_SHM_MZ_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_ki67_SHM_MZ_model_namespace::MAP_ki67_SHM_MZ_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 126;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 126;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 127;
      context__.validate_dims("data initialization","numObs","int",
          context__.to_vec());
      numObs = std::numeric_limits<int>::min();
      
      current_statement__ = 127;
      numObs = context__.vals_i("numObs")[(1 - 1)];
      current_statement__ = 127;
      current_statement__ = 127;
      check_greater_or_equal(function__, "numObs", numObs, 1);
      current_statement__ = 128;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 128;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 128;
      current_statement__ = 128;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 129;
      validate_non_negative_index("time_index", "numObs", numObs);
      current_statement__ = 130;
      context__.validate_dims("data initialization","time_index","int",
          context__.to_vec(numObs));
      time_index = std::vector<int>(numObs, std::numeric_limits<int>::min());
      
      current_statement__ = 130;
      assign(time_index, context__.vals_i("time_index"),
        "assigning variable time_index");
      current_statement__ = 130;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 130;
        current_statement__ = 130;
        check_greater_or_equal(function__, "time_index[sym1__]",
                               time_index[(sym1__ - 1)], 1);}
      current_statement__ = 131;
      validate_non_negative_index("solve_time", "n_shards", n_shards);
      current_statement__ = 132;
      context__.validate_dims("data initialization","solve_time","double",
          context__.to_vec(n_shards));
      solve_time = std::vector<double>(n_shards, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 132;
      assign(solve_time, context__.vals_r("solve_time"),
        "assigning variable solve_time");
      current_statement__ = 132;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 132;
        current_statement__ = 132;
        check_greater_or_equal(function__, "solve_time[sym1__]",
                               solve_time[(sym1__ - 1)], 0);}
      current_statement__ = 133;
      validate_non_negative_index("ageAtBMT", "n_shards", n_shards);
      current_statement__ = 134;
      context__.validate_dims("data initialization","ageAtBMT","int",
          context__.to_vec(n_shards));
      ageAtBMT = std::vector<int>(n_shards, std::numeric_limits<int>::min());
      
      current_statement__ = 134;
      assign(ageAtBMT, context__.vals_i("ageAtBMT"),
        "assigning variable ageAtBMT");
      current_statement__ = 135;
      validate_non_negative_index("counts", "numObs", numObs);
      current_statement__ = 136;
      context__.validate_dims("data initialization","counts","double",
          context__.to_vec(numObs));
      counts = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 136;
      assign(counts, context__.vals_r("counts"), "assigning variable counts");
      current_statement__ = 136;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 136;
        current_statement__ = 136;
        check_greater_or_equal(function__, "counts[sym1__]",
                               counts[(sym1__ - 1)], 0);}
      current_statement__ = 137;
      validate_non_negative_index("Nfd", "numObs", numObs);
      current_statement__ = 138;
      context__.validate_dims("data initialization","Nfd","double",
          context__.to_vec(numObs));
      Nfd = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 138;
      assign(Nfd, context__.vals_r("Nfd"), "assigning variable Nfd");
      current_statement__ = 138;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 138;
        current_statement__ = 138;
        check_greater_or_equal(function__, "Nfd[sym1__]", Nfd[(sym1__ - 1)],
                               0);}
      current_statement__ = 139;
      validate_non_negative_index("ki_donor", "numObs", numObs);
      current_statement__ = 140;
      context__.validate_dims("data initialization","ki_donor","double",
          context__.to_vec(numObs));
      ki_donor = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 140;
      assign(ki_donor, context__.vals_r("ki_donor"),
        "assigning variable ki_donor");
      current_statement__ = 140;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 140;
        current_statement__ = 140;
        check_greater_or_equal(function__, "ki_donor[sym1__]",
                               ki_donor[(sym1__ - 1)], 0);}
      current_statement__ = 141;
      validate_non_negative_index("ki_host", "numObs", numObs);
      current_statement__ = 142;
      context__.validate_dims("data initialization","ki_host","double",
          context__.to_vec(numObs));
      ki_host = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 142;
      assign(ki_host, context__.vals_r("ki_host"),
        "assigning variable ki_host");
      current_statement__ = 142;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 142;
        current_statement__ = 142;
        check_greater_or_equal(function__, "ki_host[sym1__]",
                               ki_host[(sym1__ - 1)], 0);}
      current_statement__ = 143;
      validate_non_negative_index("ts_pred1", "numPred", numPred);
      current_statement__ = 144;
      context__.validate_dims("data initialization","ts_pred1","double",
          context__.to_vec(numPred));
      ts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 144;
      assign(ts_pred1, context__.vals_r("ts_pred1"),
        "assigning variable ts_pred1");
      current_statement__ = 145;
      validate_non_negative_index("ts_pred2", "numPred", numPred);
      current_statement__ = 146;
      context__.validate_dims("data initialization","ts_pred2","double",
          context__.to_vec(numPred));
      ts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 146;
      assign(ts_pred2, context__.vals_r("ts_pred2"),
        "assigning variable ts_pred2");
      current_statement__ = 147;
      validate_non_negative_index("ts_pred3", "numPred", numPred);
      current_statement__ = 148;
      context__.validate_dims("data initialization","ts_pred3","double",
          context__.to_vec(numPred));
      ts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 148;
      assign(ts_pred3, context__.vals_r("ts_pred3"),
        "assigning variable ts_pred3");
      current_statement__ = 149;
      validate_non_negative_index("tb_pred1", "numPred", numPred);
      current_statement__ = 150;
      context__.validate_dims("data initialization","tb_pred1","double",
          context__.to_vec(numPred));
      tb_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 150;
      assign(tb_pred1, context__.vals_r("tb_pred1"),
        "assigning variable tb_pred1");
      current_statement__ = 151;
      validate_non_negative_index("tb_pred2", "numPred", numPred);
      current_statement__ = 152;
      context__.validate_dims("data initialization","tb_pred2","double",
          context__.to_vec(numPred));
      tb_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 152;
      assign(tb_pred2, context__.vals_r("tb_pred2"),
        "assigning variable tb_pred2");
      current_statement__ = 153;
      validate_non_negative_index("tb_pred3", "numPred", numPred);
      current_statement__ = 154;
      context__.validate_dims("data initialization","tb_pred3","double",
          context__.to_vec(numPred));
      tb_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 154;
      assign(tb_pred3, context__.vals_r("tb_pred3"),
        "assigning variable tb_pred3");
      current_statement__ = 155;
      validate_non_negative_index("x_i", "n_shards", n_shards);
      current_statement__ = 156;
      x_i = std::vector<std::vector<int>>(n_shards, std::vector<int>(1, std::numeric_limits<int>::min()));
      
      current_statement__ = 157;
      validate_non_negative_index("x_r", "n_shards", n_shards);
      current_statement__ = 158;
      x_r = std::vector<std::vector<double>>(n_shards, std::vector<double>(1, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 159;
      validate_non_negative_index("local_params", "n_shards", n_shards);
      current_statement__ = 160;
      local_params = std::vector<Eigen::Matrix<double, -1, 1>>(n_shards, Eigen::Matrix<double, -1, 1>(0));
      stan::math::fill(local_params, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 164;
      for (int s = 1; s <= n_shards; ++s) {
        current_statement__ = 161;
        assign(x_i, rvalue(ageAtBMT, "ageAtBMT", index_uni(s)),
          "assigning variable x_i", index_uni(s), index_uni(1));
        current_statement__ = 162;
        assign(x_r, rvalue(solve_time, "solve_time", index_uni(s)),
          "assigning variable x_r", index_uni(s), index_uni(1));}
      current_statement__ = 165;
      validate_non_negative_index("y1_mean", "n_shards", n_shards);
      current_statement__ = 166;
      validate_non_negative_index("y2_mean", "n_shards", n_shards);
      current_statement__ = 167;
      validate_non_negative_index("y3_mean", "n_shards", n_shards);
      current_statement__ = 168;
      validate_non_negative_index("y4_mean", "n_shards", n_shards);
      current_statement__ = 169;
      y_mean_stacked_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 169;
      y_mean_stacked_1dim__ = (4 * n_shards);
      current_statement__ = 170;
      validate_non_negative_index("y_mean_stacked", "(4 * n_shards)",
                                  y_mean_stacked_1dim__);
      current_statement__ = 171;
      validate_non_negative_index("total_counts_mean", "numObs", numObs);
      current_statement__ = 172;
      validate_non_negative_index("Nfd_mean", "numObs", numObs);
      current_statement__ = 173;
      validate_non_negative_index("donor_ki_mean", "numObs", numObs);
      current_statement__ = 174;
      validate_non_negative_index("host_ki_mean", "numObs", numObs);
      current_statement__ = 175;
      validate_non_negative_index("y_chi_pred1", "numPred", numPred);
      current_statement__ = 176;
      validate_non_negative_index("y_chi_pred2", "numPred", numPred);
      current_statement__ = 177;
      validate_non_negative_index("y_chi_pred3", "numPred", numPred);
      current_statement__ = 178;
      validate_non_negative_index("y1_mean_pred1", "numPred", numPred);
      current_statement__ = 179;
      validate_non_negative_index("y2_mean_pred1", "numPred", numPred);
      current_statement__ = 180;
      validate_non_negative_index("y3_mean_pred1", "numPred", numPred);
      current_statement__ = 181;
      validate_non_negative_index("y4_mean_pred1", "numPred", numPred);
      current_statement__ = 182;
      validate_non_negative_index("y1_mean_pred2", "numPred", numPred);
      current_statement__ = 183;
      validate_non_negative_index("y2_mean_pred2", "numPred", numPred);
      current_statement__ = 184;
      validate_non_negative_index("y3_mean_pred2", "numPred", numPred);
      current_statement__ = 185;
      validate_non_negative_index("y4_mean_pred2", "numPred", numPred);
      current_statement__ = 186;
      validate_non_negative_index("y1_mean_pred3", "numPred", numPred);
      current_statement__ = 187;
      validate_non_negative_index("y2_mean_pred3", "numPred", numPred);
      current_statement__ = 188;
      validate_non_negative_index("y3_mean_pred3", "numPred", numPred);
      current_statement__ = 189;
      validate_non_negative_index("y4_mean_pred3", "numPred", numPred);
      current_statement__ = 190;
      validate_non_negative_index("chicounts_pred1", "numPred", numPred);
      current_statement__ = 191;
      validate_non_negative_index("Nfd_pred1", "numPred", numPred);
      current_statement__ = 192;
      validate_non_negative_index("donorki_pred1", "numPred", numPred);
      current_statement__ = 193;
      validate_non_negative_index("hostki_pred1", "numPred", numPred);
      current_statement__ = 194;
      validate_non_negative_index("chicounts_pred2", "numPred", numPred);
      current_statement__ = 195;
      validate_non_negative_index("Nfd_pred2", "numPred", numPred);
      current_statement__ = 196;
      validate_non_negative_index("donorki_pred2", "numPred", numPred);
      current_statement__ = 197;
      validate_non_negative_index("hostki_pred2", "numPred", numPred);
      current_statement__ = 198;
      validate_non_negative_index("chicounts_pred3", "numPred", numPred);
      current_statement__ = 199;
      validate_non_negative_index("Nfd_pred3", "numPred", numPred);
      current_statement__ = 200;
      validate_non_negative_index("donorki_pred3", "numPred", numPred);
      current_statement__ = 201;
      validate_non_negative_index("hostki_pred3", "numPred", numPred);
      current_statement__ = 202;
      validate_non_negative_index("log_lik1", "numObs", numObs);
      current_statement__ = 203;
      validate_non_negative_index("log_lik2", "numObs", numObs);
      current_statement__ = 204;
      validate_non_negative_index("log_lik3", "numObs", numObs);
      current_statement__ = 205;
      validate_non_negative_index("log_lik4", "numObs", numObs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_ki67_SHM_MZ_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ N0_Log;
      N0_Log = DUMMY_VAR__;
      
      current_statement__ = 1;
      N0_Log = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        N0_Log = stan::math::lub_constrain(N0_Log, 11, 17, lp__);
      } else {
        current_statement__ = 1;
        N0_Log = stan::math::lub_constrain(N0_Log, 11, 17);
      }
      local_scalar_t__ kappa_0;
      kappa_0 = DUMMY_VAR__;
      
      current_statement__ = 2;
      kappa_0 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        kappa_0 = stan::math::lub_constrain(kappa_0, 0, 1, lp__);
      } else {
        current_statement__ = 2;
        kappa_0 = stan::math::lub_constrain(kappa_0, 0, 1);
      }
      local_scalar_t__ psi;
      psi = DUMMY_VAR__;
      
      current_statement__ = 3;
      psi = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        psi = stan::math::lb_constrain(psi, 0, lp__);
      } else {
        current_statement__ = 3;
        psi = stan::math::lb_constrain(psi, 0);
      }
      local_scalar_t__ delta;
      delta = DUMMY_VAR__;
      
      current_statement__ = 4;
      delta = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        delta = stan::math::lb_constrain(delta, 0, lp__);
      } else {
        current_statement__ = 4;
        delta = stan::math::lb_constrain(delta, 0);
      }
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 5;
      rho = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        rho = stan::math::lb_constrain(rho, 0, lp__);
      } else {
        current_statement__ = 5;
        rho = stan::math::lb_constrain(rho, 0);
      }
      local_scalar_t__ Beta;
      Beta = DUMMY_VAR__;
      
      current_statement__ = 6;
      Beta = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        Beta = stan::math::lb_constrain(Beta, 0, lp__);
      } else {
        current_statement__ = 6;
        Beta = stan::math::lb_constrain(Beta, 0);
      }
      local_scalar_t__ sigma_chi_counts;
      sigma_chi_counts = DUMMY_VAR__;
      
      current_statement__ = 7;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0, lp__);
      } else {
        current_statement__ = 7;
        sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      }
      local_scalar_t__ sigma_Nfd;
      sigma_Nfd = DUMMY_VAR__;
      
      current_statement__ = 8;
      sigma_Nfd = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0, lp__);
      } else {
        current_statement__ = 8;
        sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      }
      local_scalar_t__ sigma_donor_ki;
      sigma_donor_ki = DUMMY_VAR__;
      
      current_statement__ = 9;
      sigma_donor_ki = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0, lp__);
      } else {
        current_statement__ = 9;
        sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0);
      }
      local_scalar_t__ sigma_host_ki;
      sigma_host_ki = DUMMY_VAR__;
      
      current_statement__ = 10;
      sigma_host_ki = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0, lp__);
      } else {
        current_statement__ = 10;
        sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> global_params;
      global_params = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
      stan::math::fill(global_params, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(n_shards);
      stan::math::fill(y1_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(n_shards);
      stan::math::fill(y2_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(n_shards);
      stan::math::fill(y3_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(n_shards);
      stan::math::fill(y4_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<local_scalar_t__, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> total_counts_mean;
      total_counts_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> Nfd_mean;
      Nfd_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> donor_ki_mean;
      donor_ki_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> host_ki_mean;
      host_ki_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      local_scalar_t__ N0;
      N0 = DUMMY_VAR__;
      
      current_statement__ = 21;
      N0 = stan::math::exp(N0_Log);
      current_statement__ = 22;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 23;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 24;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 25;
      assign(global_params, Beta,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 26;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 27;
      assign(global_params, kappa_0,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 28;
      assign(y_mean_stacked,
        map_rect<1, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 34;
      for (int i = 1; i <= n_shards; ++i) {
        current_statement__ = 29;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 3))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 30;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 2))),
          "assigning variable y2_mean", index_uni(i));
        current_statement__ = 31;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 1))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 32;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((4 * i))),
          "assigning variable y4_mean", index_uni(i));}
      current_statement__ = 35;
      assign(total_counts_mean,
        to_array_1d(rvalue(y1_mean, "y1_mean", index_multi(time_index))),
        "assigning variable total_counts_mean");
      current_statement__ = 36;
      assign(Nfd_mean,
        to_array_1d(rvalue(y2_mean, "y2_mean", index_multi(time_index))),
        "assigning variable Nfd_mean");
      current_statement__ = 37;
      assign(donor_ki_mean,
        to_array_1d(rvalue(y3_mean, "y3_mean", index_multi(time_index))),
        "assigning variable donor_ki_mean");
      current_statement__ = 38;
      assign(host_ki_mean,
        to_array_1d(rvalue(y4_mean, "y4_mean", index_multi(time_index))),
        "assigning variable host_ki_mean");
      {
        current_statement__ = 112;
        lp_accum__.add(normal_lpdf<propto__>(psi, 0.5, 0.25));
        current_statement__ = 113;
        lp_accum__.add(normal_lpdf<propto__>(N0_Log, 14, 1));
        current_statement__ = 114;
        lp_accum__.add(normal_lpdf<propto__>(kappa_0, 0.1, 0.15));
        current_statement__ = 115;
        lp_accum__.add(normal_lpdf<propto__>(rho, 0.005, 0.2));
        current_statement__ = 116;
        lp_accum__.add(normal_lpdf<propto__>(delta, 0.04, 0.2));
        current_statement__ = 117;
        lp_accum__.add(normal_lpdf<propto__>(Beta, 3.5, 0.8));
        current_statement__ = 118;
        lp_accum__.add(normal_lpdf<propto__>(sigma_chi_counts, 0, 2));
        current_statement__ = 119;
        lp_accum__.add(normal_lpdf<propto__>(sigma_Nfd, 0, 2));
        current_statement__ = 120;
        lp_accum__.add(normal_lpdf<propto__>(sigma_donor_ki, 0, 2));
        current_statement__ = 121;
        lp_accum__.add(normal_lpdf<propto__>(sigma_host_ki, 0, 2));
        current_statement__ = 122;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::log(counts),
            stan::math::log(total_counts_mean), sigma_chi_counts));
        current_statement__ = 123;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(Nfd, pstream__),
            asinsqrt_array(Nfd_mean, pstream__), sigma_Nfd));
        current_statement__ = 124;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ki_donor, pstream__),
            asinsqrt_array(donor_ki_mean, pstream__), sigma_donor_ki));
        current_statement__ = 125;
        lp_accum__.add(
          normal_lpdf<propto__>(asinsqrt_array(ki_host, pstream__),
            asinsqrt_array(host_ki_mean, pstream__), sigma_host_ki));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "MAP_ki67_SHM_MZ_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double N0_Log;
      N0_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_Log = in__.scalar();
      current_statement__ = 1;
      N0_Log = stan::math::lub_constrain(N0_Log, 11, 17);
      double kappa_0;
      kappa_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kappa_0 = in__.scalar();
      current_statement__ = 2;
      kappa_0 = stan::math::lub_constrain(kappa_0, 0, 1);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      psi = in__.scalar();
      current_statement__ = 3;
      psi = stan::math::lb_constrain(psi, 0);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      delta = in__.scalar();
      current_statement__ = 4;
      delta = stan::math::lb_constrain(delta, 0);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho = in__.scalar();
      current_statement__ = 5;
      rho = stan::math::lb_constrain(rho, 0);
      double Beta;
      Beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta = in__.scalar();
      current_statement__ = 6;
      Beta = stan::math::lb_constrain(Beta, 0);
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_chi_counts = in__.scalar();
      current_statement__ = 7;
      sigma_chi_counts = stan::math::lb_constrain(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_Nfd = in__.scalar();
      current_statement__ = 8;
      sigma_Nfd = stan::math::lb_constrain(sigma_Nfd, 0);
      double sigma_donor_ki;
      sigma_donor_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_donor_ki = in__.scalar();
      current_statement__ = 9;
      sigma_donor_ki = stan::math::lb_constrain(sigma_donor_ki, 0);
      double sigma_host_ki;
      sigma_host_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_host_ki = in__.scalar();
      current_statement__ = 10;
      sigma_host_ki = stan::math::lb_constrain(sigma_host_ki, 0);
      Eigen::Matrix<double, -1, 1> global_params;
      global_params = Eigen::Matrix<double, -1, 1>(6);
      stan::math::fill(global_params, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y1_mean;
      y1_mean = Eigen::Matrix<double, -1, 1>(n_shards);
      stan::math::fill(y1_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y2_mean;
      y2_mean = Eigen::Matrix<double, -1, 1>(n_shards);
      stan::math::fill(y2_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y3_mean;
      y3_mean = Eigen::Matrix<double, -1, 1>(n_shards);
      stan::math::fill(y3_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y4_mean;
      y4_mean = Eigen::Matrix<double, -1, 1>(n_shards);
      stan::math::fill(y4_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_mean_stacked;
      y_mean_stacked = Eigen::Matrix<double, -1, 1>(y_mean_stacked_1dim__);
      stan::math::fill(y_mean_stacked, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> total_counts_mean;
      total_counts_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_mean;
      Nfd_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_ki_mean;
      donor_ki_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_ki_mean;
      host_ki_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      double N0;
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(N0_Log);
      vars__.emplace_back(kappa_0);
      vars__.emplace_back(psi);
      vars__.emplace_back(delta);
      vars__.emplace_back(rho);
      vars__.emplace_back(Beta);
      vars__.emplace_back(sigma_chi_counts);
      vars__.emplace_back(sigma_Nfd);
      vars__.emplace_back(sigma_donor_ki);
      vars__.emplace_back(sigma_host_ki);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      N0 = stan::math::exp(N0_Log);
      current_statement__ = 22;
      assign(global_params, psi,
        "assigning variable global_params", index_uni(1));
      current_statement__ = 23;
      assign(global_params, delta,
        "assigning variable global_params", index_uni(2));
      current_statement__ = 24;
      assign(global_params, rho,
        "assigning variable global_params", index_uni(3));
      current_statement__ = 25;
      assign(global_params, Beta,
        "assigning variable global_params", index_uni(4));
      current_statement__ = 26;
      assign(global_params, N0,
        "assigning variable global_params", index_uni(5));
      current_statement__ = 27;
      assign(global_params, kappa_0,
        "assigning variable global_params", index_uni(6));
      current_statement__ = 28;
      assign(y_mean_stacked,
        map_rect<2, math_reduce_functor__>(global_params, local_params, x_r,
          x_i, pstream__), "assigning variable y_mean_stacked");
      current_statement__ = 34;
      for (int i = 1; i <= n_shards; ++i) {
        current_statement__ = 29;
        assign(y1_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 3))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 30;
        assign(y2_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 2))),
          "assigning variable y2_mean", index_uni(i));
        current_statement__ = 31;
        assign(y3_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni(((4 * i) - 1))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 32;
        assign(y4_mean,
          rvalue(y_mean_stacked, "y_mean_stacked", index_uni((4 * i))),
          "assigning variable y4_mean", index_uni(i));}
      current_statement__ = 35;
      assign(total_counts_mean,
        to_array_1d(rvalue(y1_mean, "y1_mean", index_multi(time_index))),
        "assigning variable total_counts_mean");
      current_statement__ = 36;
      assign(Nfd_mean,
        to_array_1d(rvalue(y2_mean, "y2_mean", index_multi(time_index))),
        "assigning variable Nfd_mean");
      current_statement__ = 37;
      assign(donor_ki_mean,
        to_array_1d(rvalue(y3_mean, "y3_mean", index_multi(time_index))),
        "assigning variable donor_ki_mean");
      current_statement__ = 38;
      assign(host_ki_mean,
        to_array_1d(rvalue(y4_mean, "y4_mean", index_multi(time_index))),
        "assigning variable host_ki_mean");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
          vars__.emplace_back(global_params[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(y1_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(y2_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(y3_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(y4_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
          vars__.emplace_back(y_mean_stacked[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(total_counts_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(Nfd_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(donor_ki_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(host_ki_mean[(sym1__ - 1)]);}
        vars__.emplace_back(N0);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> y_chi_pred1;
      y_chi_pred1 = std::vector<std::vector<double>>(numPred, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred2;
      y_chi_pred2 = std::vector<std::vector<double>>(numPred, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> y_chi_pred3;
      y_chi_pred3 = std::vector<std::vector<double>>(numPred, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<double> y1_mean_pred1;
      y1_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred1;
      y2_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred1;
      y3_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred1;
      y4_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y1_mean_pred2;
      y1_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred2;
      y2_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred2;
      y3_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred2;
      y4_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y1_mean_pred3;
      y1_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred3;
      y2_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred3;
      y3_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred3;
      y4_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred1;
      chicounts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred1;
      Nfd_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred1;
      donorki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred1;
      hostki_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred2;
      chicounts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred2;
      Nfd_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred2;
      donorki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred2;
      hostki_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chicounts_pred3;
      chicounts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Nfd_pred3;
      Nfd_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donorki_pred3;
      donorki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> hostki_pred3;
      hostki_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik1;
      log_lik1 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik2;
      log_lik2 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik3;
      log_lik3 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik3, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik4;
      log_lik4 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik4, std::numeric_limits<double>::quiet_NaN());
      
      double eps_donor;
      eps_donor = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 70;
      eps_donor = 0.99;
      double eps_host;
      eps_host = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 71;
      eps_host = 0.95;
      std::vector<double> init_cond;
      init_cond = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 73;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(1));
      current_statement__ = 74;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(2));
      current_statement__ = 75;
      assign(init_cond, (kappa_0 * N0),
        "assigning variable init_cond", index_uni(3));
      current_statement__ = 76;
      assign(init_cond, ((1 - kappa_0) * N0),
        "assigning variable init_cond", index_uni(4));
      current_statement__ = 77;
      assign(y_chi_pred1,
        solve_ode_chi(ts_pred1, tb_pred1, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred1");
      current_statement__ = 78;
      assign(y_chi_pred2,
        solve_ode_chi(ts_pred2, tb_pred2, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred2");
      current_statement__ = 79;
      assign(y_chi_pred3,
        solve_ode_chi(ts_pred3, tb_pred3, init_cond,
          to_array_1d(global_params), pstream__),
        "assigning variable y_chi_pred3");
      current_statement__ = 105;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 80;
        assign(y1_mean_pred1,
          (((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1)) +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(2)))
             +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3)))
            + rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(4))),
          "assigning variable y1_mean_pred1", index_uni(i));
        current_statement__ = 81;
        assign(y1_mean_pred2,
          (((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1)) +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(2)))
             +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3)))
            + rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(4))),
          "assigning variable y1_mean_pred2", index_uni(i));
        current_statement__ = 82;
        assign(y1_mean_pred3,
          (((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1)) +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(2)))
             +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3)))
            + rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(4))),
          "assigning variable y1_mean_pred3", index_uni(i));
        current_statement__ = 83;
        assign(y2_mean_pred1,
          ((rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(2)))
            /
            (rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred1, "ts_pred1", index_uni(i)) - 45), pstream__))),
          "assigning variable y2_mean_pred1", index_uni(i));
        current_statement__ = 84;
        assign(y2_mean_pred2,
          ((rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(2)))
            /
            (rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred2, "ts_pred2", index_uni(i)) - 67), pstream__))),
          "assigning variable y2_mean_pred2", index_uni(i));
        current_statement__ = 85;
        assign(y2_mean_pred3,
          ((rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1)) +
             rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(2)))
            /
            (rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i)) *
              Chi_spline(
                (rvalue(ts_pred3, "ts_pred3", index_uni(i)) - 89), pstream__))),
          "assigning variable y2_mean_pred3", index_uni(i));
        current_statement__ = 86;
        assign(y3_mean_pred1,
          (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1)) /
            (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(1)) +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(2)))),
          "assigning variable y3_mean_pred1", index_uni(i));
        current_statement__ = 87;
        assign(y3_mean_pred2,
          (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1)) /
            (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(1)) +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(2)))),
          "assigning variable y3_mean_pred2", index_uni(i));
        current_statement__ = 88;
        assign(y3_mean_pred3,
          (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1)) /
            (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(1)) +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(2)))),
          "assigning variable y3_mean_pred3", index_uni(i));
        current_statement__ = 89;
        assign(y4_mean_pred1,
          (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3)) /
            (rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(3)) +
              rvalue(y_chi_pred1, "y_chi_pred1", index_uni(i), index_uni(4)))),
          "assigning variable y4_mean_pred1", index_uni(i));
        current_statement__ = 90;
        assign(y4_mean_pred2,
          (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3)) /
            (rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(3)) +
              rvalue(y_chi_pred2, "y_chi_pred2", index_uni(i), index_uni(4)))),
          "assigning variable y4_mean_pred2", index_uni(i));
        current_statement__ = 91;
        assign(y4_mean_pred3,
          (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3)) /
            (rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(3)) +
              rvalue(y_chi_pred3, "y_chi_pred3", index_uni(i), index_uni(4)))),
          "assigning variable y4_mean_pred3", index_uni(i));
        current_statement__ = 92;
        assign(chicounts_pred1,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred1, "y1_mean_pred1", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred1", index_uni(i));
        current_statement__ = 93;
        assign(chicounts_pred2,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred2, "y1_mean_pred2", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred2", index_uni(i));
        current_statement__ = 94;
        assign(chicounts_pred3,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred3, "y1_mean_pred3", index_uni(i))),
              sigma_chi_counts, base_rng__)),
          "assigning variable chicounts_pred3", index_uni(i));
        current_statement__ = 95;
        assign(Nfd_pred1,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y2_mean_pred1, "y2_mean_pred1", index_uni(i)), pstream__),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred1", index_uni(i));
        current_statement__ = 96;
        assign(Nfd_pred2,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y2_mean_pred2, "y2_mean_pred2", index_uni(i)), pstream__),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred2", index_uni(i));
        current_statement__ = 97;
        assign(Nfd_pred3,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y2_mean_pred3, "y2_mean_pred3", index_uni(i)), pstream__),
              sigma_Nfd, base_rng__), pstream__),
          "assigning variable Nfd_pred3", index_uni(i));
        current_statement__ = 98;
        assign(donorki_pred1,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred1", index_uni(i));
        current_statement__ = 99;
        assign(donorki_pred2,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred2", index_uni(i));
        current_statement__ = 100;
        assign(donorki_pred3,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i)), pstream__),
              sigma_donor_ki, base_rng__), pstream__),
          "assigning variable donorki_pred3", index_uni(i));
        current_statement__ = 101;
        assign(hostki_pred1,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y4_mean_pred1, "y4_mean_pred1", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred1", index_uni(i));
        current_statement__ = 102;
        assign(hostki_pred2,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y4_mean_pred2, "y4_mean_pred2", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred2", index_uni(i));
        current_statement__ = 103;
        assign(hostki_pred3,
          asinsqrt_inv(
            normal_rng(
              asinsqrt_real(
                rvalue(y4_mean_pred3, "y4_mean_pred3", index_uni(i)), pstream__),
              sigma_host_ki, base_rng__), pstream__),
          "assigning variable hostki_pred3", index_uni(i));}
      current_statement__ = 111;
      for (int n = 1; n <= numObs; ++n) {
        current_statement__ = 106;
        assign(log_lik1,
          normal_lpdf<false>(rvalue(counts, "counts", index_uni(n)),
            stan::math::log(rvalue(y1_mean, "y1_mean", index_uni(n))),
            sigma_chi_counts), "assigning variable log_lik1", index_uni(n));
        current_statement__ = 107;
        assign(log_lik2,
          normal_lpdf<false>(rvalue(Nfd, "Nfd", index_uni(n)),
            asinsqrt_real(
              rvalue(y2_mean, "y2_mean", index_uni(n)), pstream__),
            sigma_Nfd), "assigning variable log_lik2", index_uni(n));
        current_statement__ = 108;
        assign(log_lik3,
          normal_lpdf<false>(rvalue(ki_donor, "ki_donor", index_uni(n)),
            asinsqrt_real(
              rvalue(y3_mean, "y3_mean", index_uni(n)), pstream__),
            sigma_donor_ki), "assigning variable log_lik3", index_uni(n));
        current_statement__ = 109;
        assign(log_lik4,
          normal_lpdf<false>(rvalue(ki_host, "ki_host", index_uni(n)),
            asinsqrt_real(
              rvalue(y4_mean, "y4_mean", index_uni(n)), pstream__),
            sigma_host_ki), "assigning variable log_lik4", index_uni(n));}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred1[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred2[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
          vars__.emplace_back(y_chi_pred3[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(chicounts_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(Nfd_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donorki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(hostki_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik4[(sym1__ - 1)]);}
      vars__.emplace_back(eps_donor);
      vars__.emplace_back(eps_host);
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        vars__.emplace_back(init_cond[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double N0_Log;
      N0_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_Log = context__.vals_r("N0_Log")[(1 - 1)];
      double N0_Log_free__;
      N0_Log_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      N0_Log_free__ = stan::math::lub_free(N0_Log, 11, 17);
      double kappa_0;
      kappa_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kappa_0 = context__.vals_r("kappa_0")[(1 - 1)];
      double kappa_0_free__;
      kappa_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kappa_0_free__ = stan::math::lub_free(kappa_0, 0, 1);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      psi = context__.vals_r("psi")[(1 - 1)];
      double psi_free__;
      psi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      psi_free__ = stan::math::lb_free(psi, 0);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      delta = context__.vals_r("delta")[(1 - 1)];
      double delta_free__;
      delta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      delta_free__ = stan::math::lb_free(delta, 0);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho = context__.vals_r("rho")[(1 - 1)];
      double rho_free__;
      rho_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      rho_free__ = stan::math::lb_free(rho, 0);
      double Beta;
      Beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta = context__.vals_r("Beta")[(1 - 1)];
      double Beta_free__;
      Beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta_free__ = stan::math::lb_free(Beta, 0);
      double sigma_chi_counts;
      sigma_chi_counts = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_chi_counts = context__.vals_r("sigma_chi_counts")[(1 - 1)];
      double sigma_chi_counts_free__;
      sigma_chi_counts_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma_chi_counts_free__ = stan::math::lb_free(sigma_chi_counts, 0);
      double sigma_Nfd;
      sigma_Nfd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_Nfd = context__.vals_r("sigma_Nfd")[(1 - 1)];
      double sigma_Nfd_free__;
      sigma_Nfd_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_Nfd_free__ = stan::math::lb_free(sigma_Nfd, 0);
      double sigma_donor_ki;
      sigma_donor_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_donor_ki = context__.vals_r("sigma_donor_ki")[(1 - 1)];
      double sigma_donor_ki_free__;
      sigma_donor_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_donor_ki_free__ = stan::math::lb_free(sigma_donor_ki, 0);
      double sigma_host_ki;
      sigma_host_ki = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_host_ki = context__.vals_r("sigma_host_ki")[(1 - 1)];
      double sigma_host_ki_free__;
      sigma_host_ki_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_host_ki_free__ = stan::math::lb_free(sigma_host_ki, 0);
      vars__.emplace_back(N0_Log_free__);
      vars__.emplace_back(kappa_0_free__);
      vars__.emplace_back(psi_free__);
      vars__.emplace_back(delta_free__);
      vars__.emplace_back(rho_free__);
      vars__.emplace_back(Beta_free__);
      vars__.emplace_back(sigma_chi_counts_free__);
      vars__.emplace_back(sigma_Nfd_free__);
      vars__.emplace_back(sigma_donor_ki_free__);
      vars__.emplace_back(sigma_host_ki_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("N0_Log");
    names__.emplace_back("kappa_0");
    names__.emplace_back("psi");
    names__.emplace_back("delta");
    names__.emplace_back("rho");
    names__.emplace_back("Beta");
    names__.emplace_back("sigma_chi_counts");
    names__.emplace_back("sigma_Nfd");
    names__.emplace_back("sigma_donor_ki");
    names__.emplace_back("sigma_host_ki");
    names__.emplace_back("global_params");
    names__.emplace_back("y1_mean");
    names__.emplace_back("y2_mean");
    names__.emplace_back("y3_mean");
    names__.emplace_back("y4_mean");
    names__.emplace_back("y_mean_stacked");
    names__.emplace_back("total_counts_mean");
    names__.emplace_back("Nfd_mean");
    names__.emplace_back("donor_ki_mean");
    names__.emplace_back("host_ki_mean");
    names__.emplace_back("N0");
    names__.emplace_back("y_chi_pred1");
    names__.emplace_back("y_chi_pred2");
    names__.emplace_back("y_chi_pred3");
    names__.emplace_back("y1_mean_pred1");
    names__.emplace_back("y2_mean_pred1");
    names__.emplace_back("y3_mean_pred1");
    names__.emplace_back("y4_mean_pred1");
    names__.emplace_back("y1_mean_pred2");
    names__.emplace_back("y2_mean_pred2");
    names__.emplace_back("y3_mean_pred2");
    names__.emplace_back("y4_mean_pred2");
    names__.emplace_back("y1_mean_pred3");
    names__.emplace_back("y2_mean_pred3");
    names__.emplace_back("y3_mean_pred3");
    names__.emplace_back("y4_mean_pred3");
    names__.emplace_back("chicounts_pred1");
    names__.emplace_back("Nfd_pred1");
    names__.emplace_back("donorki_pred1");
    names__.emplace_back("hostki_pred1");
    names__.emplace_back("chicounts_pred2");
    names__.emplace_back("Nfd_pred2");
    names__.emplace_back("donorki_pred2");
    names__.emplace_back("hostki_pred2");
    names__.emplace_back("chicounts_pred3");
    names__.emplace_back("Nfd_pred3");
    names__.emplace_back("donorki_pred3");
    names__.emplace_back("hostki_pred3");
    names__.emplace_back("log_lik1");
    names__.emplace_back("log_lik2");
    names__.emplace_back("log_lik3");
    names__.emplace_back("log_lik4");
    names__.emplace_back("eps_donor");
    names__.emplace_back("eps_host");
    names__.emplace_back("init_cond");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(6)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_mean_stacked_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred),
                                             static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(4)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0_Log");
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "Beta");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    param_names__.emplace_back(std::string() + "sigma_donor_ki");
    param_names__.emplace_back(std::string() + "sigma_host_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "total_counts_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_mean" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "N0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik4" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "eps_donor");
      param_names__.emplace_back(std::string() + "eps_host");
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "N0_Log");
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "delta");
    param_names__.emplace_back(std::string() + "rho");
    param_names__.emplace_back(std::string() + "Beta");
    param_names__.emplace_back(std::string() + "sigma_chi_counts");
    param_names__.emplace_back(std::string() + "sigma_Nfd");
    param_names__.emplace_back(std::string() + "sigma_donor_ki");
    param_names__.emplace_back(std::string() + "sigma_host_ki");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "global_params" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= y_mean_stacked_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean_stacked" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "total_counts_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_mean" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "N0");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= numPred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y_chi_pred3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chicounts_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Nfd_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donorki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "hostki_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik4" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "eps_donor");
      param_names__.emplace_back(std::string() + "eps_host");
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"total_counts_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"donor_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"host_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik3\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik4\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"eps_donor\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"eps_host\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"N0_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_chi_counts\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_Nfd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_donor_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_host_ki\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_params\",\"type\":{\"name\":\"vector\",\"length\":" << 6 << "},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"vector\",\"length\":" << n_shards << "},\"block\":\"transformed_parameters\"},{\"name\":\"y_mean_stacked\",\"type\":{\"name\":\"vector\",\"length\":" << y_mean_stacked_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"total_counts_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Nfd_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"donor_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"host_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"N0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_chi_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_chi_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"chicounts_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Nfd_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donorki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"hostki_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik3\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik4\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"eps_donor\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"eps_host\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = MAP_ki67_SHM_MZ_model_namespace::MAP_ki67_SHM_MZ_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return MAP_ki67_SHM_MZ_model_namespace::profiles__;
}

#endif


STAN_REGISTER_MAP_RECT(1, MAP_ki67_SHM_MZ_model_namespace::math_reduce_functor__)
STAN_REGISTER_MAP_RECT(2, MAP_ki67_SHM_MZ_model_namespace::math_reduce_functor__)