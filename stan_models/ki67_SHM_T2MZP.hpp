
// Code generated by stanc a7f4b745
#include <stan/model/model_header.hpp>
namespace ki67_SHM_T2MZP_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 329> locations_array__ = 
{" (found before start of program)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 217, column 2 to column 14)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 218, column 2 to column 35)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 219, column 2 to column 31)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 220, column 2 to column 15)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 221, column 2 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 222, column 2 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 225, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 226, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 227, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 228, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 232, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 233, column 2 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 234, column 2 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 235, column 2 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 236, column 2 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 238, column 2 to column 33)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 239, column 2 to column 38)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 240, column 2 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 241, column 2 to column 31)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 243, column 2 to column 16)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 244, column 2 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 246, column 2 to column 27)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 247, column 2 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 248, column 2 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 254, column 2 to column 21)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 255, column 2 to column 21)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 256, column 2 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 257, column 2 to column 36)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 259, column 2 to column 17)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 260, column 2 to column 17)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 261, column 2 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 262, column 2 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 265, column 2 to column 64)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 269, column 4 to column 81)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 272, column 4 to column 79)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 275, column 4 to column 66)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 278, column 4 to column 63)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 267, column 23 to line 279, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 267, column 2 to line 279, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 283, column 4 to column 48)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 286, column 4 to column 85)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 289, column 4 to column 46)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 292, column 4 to column 45)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 281, column 21 to line 293, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 281, column 2 to line 293, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 319, column 2 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 320, column 2 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 321, column 2 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 2 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 35 to column 67)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 68 to column 96)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 97 to column 125)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 2 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 35 to column 67)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 68 to column 96)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 97 to column 125)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 2 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 35 to column 67)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 68 to column 96)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 97 to column 125)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 2 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 33 to column 59)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 60 to column 93)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 94 to column 126)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 2 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 33 to column 59)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 60 to column 93)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 94 to column 126)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 2 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 33 to column 59)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 60 to column 93)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 94 to column 126)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 2 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 27 to column 51)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 52 to column 76)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 77 to column 101)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 337, column 2 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 338, column 2 to column 29)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 339, column 2 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 340, column 2 to column 27)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 343, column 2 to column 72)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 344, column 2 to column 72)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 345, column 2 to column 72)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 351, column 4 to column 123)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 352, column 4 to column 76)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 354, column 4 to column 123)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 355, column 4 to column 76)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 357, column 4 to column 123)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 358, column 4 to column 76)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 349, column 22 to line 359, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 349, column 2 to line 359, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 383, column 4 to column 136)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 384, column 4 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 386, column 4 to column 96)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 387, column 4 to column 97)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 389, column 4 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 390, column 4 to column 95)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 392, column 4 to column 136)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 393, column 4 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 395, column 4 to column 96)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 396, column 4 to column 97)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 398, column 4 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 399, column 4 to column 95)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 401, column 4 to column 136)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 402, column 4 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 404, column 4 to column 96)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 405, column 4 to column 97)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 407, column 4 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 408, column 4 to column 95)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 382, column 22 to line 409, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 382, column 2 to line 409, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 413, column 4 to column 63)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 414, column 4 to column 74)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 415, column 4 to column 74)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 416, column 4 to column 74)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 412, column 22 to line 417, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 412, column 2 to line 417, column 3)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 298, column 2 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 299, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 300, column 2 to column 31)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 301, column 2 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 302, column 2 to column 31)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 303, column 2 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 305, column 2 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 306, column 2 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 307, column 2 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 308, column 2 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 311, column 2 to column 36)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 312, column 2 to column 53)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 313, column 2 to column 53)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 314, column 2 to column 53)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 184, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 185, column 2 to column 27)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 186, column 2 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 187, column 12 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 187, column 2 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 188, column 29 to column 35)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 188, column 2 to column 37)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 189, column 29 to column 37)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 189, column 2 to column 39)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 190, column 27 to column 35)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 190, column 2 to column 37)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 191, column 25 to column 31)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 191, column 2 to column 33)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 192, column 22 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 192, column 2 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 193, column 27 to column 33)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 193, column 2 to column 35)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 194, column 26 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 194, column 2 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 195, column 16 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 195, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 196, column 16 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 196, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 197, column 16 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 197, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 198, column 16 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 198, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 199, column 16 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 199, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 200, column 16 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 200, column 2 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 204, column 10 to column 16)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 204, column 2 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 205, column 10 to column 16)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 205, column 2 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 206, column 10 to column 16)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 206, column 2 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 207, column 10 to column 16)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 207, column 2 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 209, column 2 to column 19)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 210, column 2 to column 33)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 211, column 2 to column 38)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 212, column 2 to column 37)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 232, column 13 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 233, column 15 to column 21)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 234, column 15 to column 21)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 235, column 15 to column 21)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 236, column 15 to column 21)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 238, column 23 to column 31)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 239, column 28 to column 36)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 240, column 20 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 241, column 21 to column 29)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 319, column 23 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 320, column 23 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 321, column 23 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 25 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 58 to column 65)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 87 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 324, column 116 to column 123)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 25 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 58 to column 65)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 87 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 325, column 116 to column 123)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 25 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 58 to column 65)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 87 to column 94)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 326, column 116 to column 123)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 23 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 50 to column 57)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 84 to column 91)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 329, column 117 to column 124)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 23 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 50 to column 57)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 84 to column 91)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 330, column 117 to column 124)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 23 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 50 to column 57)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 84 to column 91)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 331, column 117 to column 124)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 9 to column 15)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 34 to column 40)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 59 to column 65)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 334, column 84 to column 90)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 5, column 6 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 5, column 21 to column 41)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 7, column 6 to column 17)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 8, column 6 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 12, column 6 to column 49)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 13, column 6 to column 19)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 3, column 30 to line 14, column 4)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 19, column 6 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 19, column 26 to column 44)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 20, column 6 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 22, column 7 to column 16)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 28, column 9 to column 55)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 27, column 14 to line 29, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 26, column 9 to column 17)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 25, column 27 to line 27, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 25, column 7 to line 29, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 31, column 9 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 17, column 37 to line 32, column 5)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 37, column 6 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 37, column 26 to column 45)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 38, column 6 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 40, column 7 to column 16)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 46, column 9 to column 55)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 45, column 14 to line 47, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 44, column 9 to column 17)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 43, column 27 to line 45, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 43, column 7 to line 47, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 48, column 9 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 35, column 26 to line 49, column 5)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 54, column 7 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 54, column 27 to column 46)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 54, column 47 to column 60)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 55, column 7 to column 54)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 56, column 7 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 52, column 38 to line 57, column 6)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 64, column 5 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 65, column 5 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 66, column 5 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 67, column 5 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 69, column 5 to column 27)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 72, column 5 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 75, column 5 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 77, column 5 to column 166)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 79, column 5 to column 157)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 81, column 5 to column 155)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 83, column 5 to column 146)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 85, column 5 to column 17)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 61, column 78 to line 86, column 4)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 90, column 5 to column 19)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 95, column 7 to column 114)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 94, column 12 to line 96, column 6)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 93, column 7 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 92, column 28 to line 94, column 6)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 92, column 5 to line 96, column 6)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 98, column 5 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 88, column 69 to line 99, column 5)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 106, column 7 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 107, column 7 to column 22)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 108, column 7 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 109, column 7 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 111, column 7 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 112, column 7 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 118, column 9 to column 24)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 117, column 14 to line 119, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 116, column 9 to column 53)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 115, column 27 to line 117, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 115, column 7 to line 119, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 122, column 7 to column 22)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 123, column 7 to column 22)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 124, column 7 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 125, column 7 to column 34)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 131, column 9 to column 27)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 130, column 14 to line 132, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 129, column 9 to column 121)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 128, column 33 to line 130, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 128, column 7 to line 132, column 8)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 133, column 6 to column 21)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 104, column 18 to line 134, column 5)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 141, column 9 to column 39)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 142, column 22 to column 30)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 142, column 9 to column 32)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 145, column 11 to column 88)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 144, column 28 to line 146, column 10)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 144, column 8 to line 146, column 10)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 147, column 8 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 139, column 20 to line 148, column 7)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 152, column 6 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 153, column 18 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 153, column 6 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 154, column 6 to column 19)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 156, column 8 to column 39)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 155, column 25 to line 157, column 7)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 155, column 6 to line 157, column 7)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 158, column 6 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 151, column 41 to line 159, column 5)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 161, column 6 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 162, column 6 to column 19)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 163, column 6 to column 28)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 164, column 6 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 160, column 31 to line 165, column 5)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 167, column 6 to column 26)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 168, column 18 to column 23)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 168, column 6 to column 25)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 169, column 6 to column 19)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 171, column 8 to column 54)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 170, column 25 to line 172, column 7)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 170, column 6 to line 172, column 7)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 173, column 6 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 166, column 41 to line 174, column 5)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 176, column 6 to column 18)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 177, column 6 to column 19)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 178, column 6 to column 43)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 179, column 6 to column 20)",
 " (in 'MZ_New_dynamics/stan_models/ki67_SHM_T2MZP.stan', line 175, column 31 to line 180, column 5)"};


template <typename T0__>
stan::promote_args_t<T0__>
theta_spline(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ nu;
    nu = DUMMY_VAR__;
    
    current_statement__ = 215;
    nu = 0.0;
    local_scalar_t__ theta0;
    theta0 = DUMMY_VAR__;
    
    current_statement__ = 216;
    theta0 = 9.495;
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    int t0;
    t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 218;
    t0 = 40;
    current_statement__ = 219;
    theta = (stan::math::exp(theta0) * stan::math::exp((-nu * (time - t0))));
    current_statement__ = 220;
    return theta;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct theta_spline_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return theta_spline(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_T2MZP_timevar(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 222;
    chiEst = 0.75;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 223;
    qEst = 0.011;
    int t0;
    t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 224;
    t0 = 10;
    local_scalar_t__ chi;
    chi = DUMMY_VAR__;
    
    current_statement__ = 230;
    if (logical_lt((time - t0), 0)) {
      current_statement__ = 228;
      chi = 0;
    } else {
      current_statement__ = 226;
      chi = (chiEst * (1 - stan::math::exp((-qEst * (time - t0)))));
    }
    current_statement__ = 231;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_T2MZP_timevar_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_T2MZP_timevar(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
Chi_T1(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ chiEst;
    chiEst = DUMMY_VAR__;
    
    current_statement__ = 233;
    chiEst = 0.75;
    local_scalar_t__ qEst;
    qEst = DUMMY_VAR__;
    
    current_statement__ = 234;
    qEst = 0.1748;
    int t0;
    t0 = std::numeric_limits<int>::min();
    
    current_statement__ = 235;
    t0 = 10;
    local_scalar_t__ chi;
    chi = DUMMY_VAR__;
    
    current_statement__ = 241;
    if (logical_lt((time - t0), 0)) {
      current_statement__ = 239;
      chi = 0;
    } else {
      current_statement__ = 237;
      chi = (chiEst * (1 - stan::math::exp((-qEst * (time - t0)))));
    }
    current_statement__ = 242;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct Chi_T1_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return Chi_T1(time, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
eps_donor_timevar(const T0__& time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ eps_0;
    eps_0 = DUMMY_VAR__;
    
    current_statement__ = 244;
    eps_0 = 0.068;
    local_scalar_t__ eps_f;
    eps_f = DUMMY_VAR__;
    
    current_statement__ = 245;
    eps_f = 0.01;
    local_scalar_t__ A;
    A = DUMMY_VAR__;
    
    current_statement__ = 246;
    A = 115;
    local_scalar_t__ k_val;
    k_val = DUMMY_VAR__;
    
    current_statement__ = 247;
    k_val = (stan::math::exp((-eps_f * (time + A))) + eps_0);
    current_statement__ = 248;
    return k_val;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eps_donor_timevar_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& time, std::ostream* pstream__)  const 
{
return eps_donor_timevar(time, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
shm(const T0__& time, const std::vector<T1__>& k,
    const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
    const std::vector<int>& idata, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ psi;
    psi = DUMMY_VAR__;
    
    current_statement__ = 250;
    psi = rvalue(parms, "parms", index_uni(1));
    local_scalar_t__ rho;
    rho = DUMMY_VAR__;
    
    current_statement__ = 251;
    rho = rvalue(parms, "parms", index_uni(2));
    local_scalar_t__ lambda;
    lambda = DUMMY_VAR__;
    
    current_statement__ = 252;
    lambda = rvalue(parms, "parms", index_uni(3));
    local_scalar_t__ Beta;
    Beta = DUMMY_VAR__;
    
    current_statement__ = 253;
    Beta = rvalue(parms, "parms", index_uni(4));
    local_scalar_t__ eps_host;
    eps_host = DUMMY_VAR__;
    
    current_statement__ = 254;
    eps_host = 0.068;
    local_scalar_t__ ageAtBMT;
    ageAtBMT = DUMMY_VAR__;
    
    current_statement__ = 255;
    ageAtBMT = rvalue(parms, "parms", index_uni(5));
    std::vector<local_scalar_t__> dkdt;
    dkdt = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    current_statement__ = 257;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           Chi_T2MZP_timevar((time - ageAtBMT), pstream__)) *
          eps_donor_timevar(time, pstream__)) +
         (rho *
           ((2 * rvalue(k, "k", index_uni(2))) +
             rvalue(k, "k", index_uni(1))))) -
        (((1 / Beta) + (lambda + rho)) * rvalue(k, "k", index_uni(1)))),
      "assigning variable dkdt", index_uni(1));
    current_statement__ = 258;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           Chi_T2MZP_timevar((time - ageAtBMT), pstream__)) *
          (1 - eps_donor_timevar(time, pstream__))) +
         ((1 / Beta) * rvalue(k, "k", index_uni(1)))) -
        ((rho + (lambda + rho)) * rvalue(k, "k", index_uni(2)))),
      "assigning variable dkdt", index_uni(2));
    current_statement__ = 259;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           (1 - Chi_T2MZP_timevar((time - ageAtBMT), pstream__))) * eps_host)
         +
         (rho *
           ((2 * rvalue(k, "k", index_uni(4))) +
             rvalue(k, "k", index_uni(3))))) -
        (((1 / Beta) + (lambda + rho)) * rvalue(k, "k", index_uni(3)))),
      "assigning variable dkdt", index_uni(3));
    current_statement__ = 260;
    assign(dkdt,
      (((((psi * theta_spline(time, pstream__)) *
           (1 - Chi_T2MZP_timevar((time - ageAtBMT), pstream__))) *
          (1 - eps_host)) + ((1 / Beta) * rvalue(k, "k", index_uni(3)))) -
        ((rho + (lambda + rho)) * rvalue(k, "k", index_uni(4)))),
      "assigning variable dkdt", index_uni(4));
    current_statement__ = 261;
    return dkdt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct shm_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& time, const std::vector<T1__>& k,
           const std::vector<T2__>& parms, const std::vector<T3__>& rdata,
           const std::vector<int>& idata, std::ostream* pstream__)  const 
{
return shm(time, k, parms, rdata, idata, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
solve_shm(const T0__& solve_time, const std::vector<T1__>& init_cond,
          const std::vector<T2__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> value;
    value = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    current_statement__ = 268;
    if (logical_lte(solve_time, 40.0)) {
      current_statement__ = 266;
      assign(value, init_cond, "assigning variable value");
    } else {
      current_statement__ = 264;
      assign(value,
        to_array_1d(
          integrate_ode_rk45(shm_functor__(), init_cond, 40.0,
            rep_array(solve_time, 1), parms, std::vector<double>{0.0},
            std::vector<int>{0}, pstream__)), "assigning variable value");
    }
    current_statement__ = 269;
    return value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_shm_functor__ {
template <typename T0__, typename T1__, typename T2__>
std::vector<stan::promote_args_t<T0__, T1__,
T2__>>
operator()(const T0__& solve_time, const std::vector<T1__>& init_cond,
           const std::vector<T2__>& parms, std::ostream* pstream__)  const 
{
return solve_shm(solve_time, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
solve_chi(const T0__& solve_time, const T1__& ageAtBMT,
          const std::vector<T2__>& init_cond, const std::vector<T3__>& parms,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> params;
    params = std::vector<local_scalar_t__>(5, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> y0;
    y0 = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> init_tb;
    init_tb = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    current_statement__ = 275;
    assign(params, rvalue(parms, "parms", index_min_max(1, 4)),
      "assigning variable params", index_min_max(1, 4));
    current_statement__ = 276;
    assign(params, ageAtBMT, "assigning variable params", index_uni(5));
    current_statement__ = 281;
    if (logical_gt(ageAtBMT, 40.0)) {
      current_statement__ = 279;
      assign(y0, solve_shm(ageAtBMT, init_cond, params, pstream__),
        "assigning variable y0");
    } else {
      current_statement__ = 277;
      assign(y0, init_cond, "assigning variable y0");
    }
    current_statement__ = 282;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(1));
    current_statement__ = 283;
    assign(init_tb, 0, "assigning variable init_tb", index_uni(2));
    current_statement__ = 284;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(1)) + rvalue(y0, "y0", index_uni(3))),
      "assigning variable init_tb", index_uni(3));
    current_statement__ = 285;
    assign(init_tb,
      (rvalue(y0, "y0", index_uni(2)) + rvalue(y0, "y0", index_uni(4))),
      "assigning variable init_tb", index_uni(4));
    current_statement__ = 290;
    if (logical_gt(solve_time, ageAtBMT)) {
      current_statement__ = 288;
      assign(y_solve,
        to_array_1d(
          integrate_ode_rk45(shm_functor__(), init_tb, ageAtBMT,
            rep_array(solve_time, 1), params, std::vector<double>{0.0},
            std::vector<int>{0}, pstream__)), "assigning variable y_solve");
    } else {
      current_statement__ = 286;
      assign(y_solve, init_tb, "assigning variable y_solve");
    }
    current_statement__ = 291;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& solve_time, const T1__& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_chi(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
solve_ode_chi(const std::vector<T0__>& solve_time,
              const std::vector<T1__>& ageAtBMT,
              const std::vector<T2__>& init_cond,
              const std::vector<T3__>& parms, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int numdim;
    numdim = std::numeric_limits<int>::min();
    
    current_statement__ = 293;
    numdim = size(solve_time);
    current_statement__ = 294;
    validate_non_negative_index("y_solve", "4 * numdim", (4 * numdim));
    std::vector<local_scalar_t__> y_solve;
    y_solve = std::vector<local_scalar_t__>((4 * numdim), DUMMY_VAR__);
    
    current_statement__ = 298;
    for (int i = 1; i <= numdim; ++i) {
      current_statement__ = 296;
      assign(y_solve,
        solve_chi(rvalue(solve_time, "solve_time", index_uni(i)),
          rvalue(ageAtBMT, "ageAtBMT", index_uni(i)), init_cond,
          parms, pstream__),
        "assigning variable y_solve", index_min_max(((4 * i) - 3), (4 * i)));
    }
    current_statement__ = 299;
    return y_solve;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct solve_ode_chi_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const std::vector<T0__>& solve_time,
           const std::vector<T1__>& ageAtBMT,
           const std::vector<T2__>& init_cond,
           const std::vector<T3__>& parms, std::ostream* pstream__)  const 
{
return solve_ode_chi(solve_time, ageAtBMT, init_cond, parms, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
logit_boundary_array(const std::vector<T0__>& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndims;
    ndims = std::numeric_limits<int>::min();
    
    current_statement__ = 301;
    ndims = size(x);
    current_statement__ = 302;
    validate_non_negative_index("answer", "ndims", ndims);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
    
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 304;
    b = 1.2;
    current_statement__ = 307;
    for (int i = 1; i <= ndims; ++i) {
      current_statement__ = 305;
      assign(answer,
        stan::math::log(
          (rvalue(x, "x", index_uni(i)) / (b - rvalue(x, "x", index_uni(i))))),
        "assigning variable answer", index_uni(i));}
    current_statement__ = 308;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_boundary_array_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& x, std::ostream* pstream__)  const 
{
return logit_boundary_array(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
logit_boundary(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 311;
    b = 1.2;
    current_statement__ = 312;
    answer = stan::math::log((x / (b - x)));
    current_statement__ = 313;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct logit_boundary_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return logit_boundary(x, pstream__);
}
};

template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
expit_boundary_array(const std::vector<T0__>& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int ndims;
    ndims = std::numeric_limits<int>::min();
    
    current_statement__ = 315;
    ndims = size(x);
    current_statement__ = 316;
    validate_non_negative_index("answer", "ndims", ndims);
    std::vector<local_scalar_t__> answer;
    answer = std::vector<local_scalar_t__>(ndims, DUMMY_VAR__);
    
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 318;
    b = 1.2;
    current_statement__ = 321;
    for (int i = 1; i <= ndims; ++i) {
      current_statement__ = 319;
      assign(answer,
        ((b * stan::math::exp(rvalue(x, "x", index_uni(i)))) /
          (1 + stan::math::exp(rvalue(x, "x", index_uni(i))))),
        "assigning variable answer", index_uni(i));}
    current_statement__ = 322;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct expit_boundary_array_functor__ {
template <typename T0__>
std::vector<stan::promote_args_t<T0__>>
operator()(const std::vector<T0__>& x, std::ostream* pstream__)  const 
{
return expit_boundary_array(x, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
expit_boundary(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ answer;
    answer = DUMMY_VAR__;
    
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 325;
    b = 1.2;
    current_statement__ = 326;
    answer = ((b * stan::math::exp(x)) / (1 + stan::math::exp(x)));
    current_statement__ = 327;
    return answer;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct expit_boundary_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return expit_boundary(x, pstream__);
}
};

class ki67_SHM_T2MZP_model final : public model_base_crtp<ki67_SHM_T2MZP_model> {

 private:
  int numObs;
  int n_shards;
  int numPred;
  std::vector<int> dpBMT;
  std::vector<int> time_index;
  std::vector<double> solve_time;
  std::vector<double> ageAtBMT;
  std::vector<double> counts;
  std::vector<double> Nfd;
  std::vector<double> ki_donor;
  std::vector<double> ki_host;
  std::vector<double> ts_pred1;
  std::vector<double> ts_pred2;
  std::vector<double> ts_pred3;
  std::vector<double> tb_pred1;
  std::vector<double> tb_pred2;
  std::vector<double> tb_pred3;
  std::vector<double> y1;
  std::vector<double> y2;
  std::vector<double> y3;
  std::vector<double> y4;
  int k_hat_1dim__;
  int k_hat_pred_age1_1dim__;
  int k_hat_pred_age2_1dim__;
  int k_hat_pred_age3_1dim__;
 
 public:
  ~ki67_SHM_T2MZP_model() { }
  
  inline std::string model_name() const final { return "ki67_SHM_T2MZP_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 a7f4b745", "stancflags = "};
  }
  
  
  ki67_SHM_T2MZP_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "ki67_SHM_T2MZP_model_namespace::ki67_SHM_T2MZP_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 132;
      context__.validate_dims("data initialization","numObs","int",
          context__.to_vec());
      numObs = std::numeric_limits<int>::min();
      
      current_statement__ = 132;
      numObs = context__.vals_i("numObs")[(1 - 1)];
      current_statement__ = 132;
      current_statement__ = 132;
      check_greater_or_equal(function__, "numObs", numObs, 1);
      current_statement__ = 133;
      context__.validate_dims("data initialization","n_shards","int",
          context__.to_vec());
      n_shards = std::numeric_limits<int>::min();
      
      current_statement__ = 133;
      n_shards = context__.vals_i("n_shards")[(1 - 1)];
      current_statement__ = 133;
      current_statement__ = 133;
      check_greater_or_equal(function__, "n_shards", n_shards, 1);
      current_statement__ = 134;
      context__.validate_dims("data initialization","numPred","int",
          context__.to_vec());
      numPred = std::numeric_limits<int>::min();
      
      current_statement__ = 134;
      numPred = context__.vals_i("numPred")[(1 - 1)];
      current_statement__ = 134;
      current_statement__ = 134;
      check_greater_or_equal(function__, "numPred", numPred, 1);
      current_statement__ = 135;
      validate_non_negative_index("dpBMT", "numObs", numObs);
      current_statement__ = 136;
      context__.validate_dims("data initialization","dpBMT","int",
          context__.to_vec(numObs));
      dpBMT = std::vector<int>(numObs, std::numeric_limits<int>::min());
      
      current_statement__ = 136;
      assign(dpBMT, context__.vals_i("dpBMT"), "assigning variable dpBMT");
      current_statement__ = 137;
      validate_non_negative_index("time_index", "numObs", numObs);
      current_statement__ = 138;
      context__.validate_dims("data initialization","time_index","int",
          context__.to_vec(numObs));
      time_index = std::vector<int>(numObs, std::numeric_limits<int>::min());
      
      current_statement__ = 138;
      assign(time_index, context__.vals_i("time_index"),
        "assigning variable time_index");
      current_statement__ = 138;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 138;
        current_statement__ = 138;
        check_greater_or_equal(function__, "time_index[sym1__]",
                               time_index[(sym1__ - 1)], 1);}
      current_statement__ = 139;
      validate_non_negative_index("solve_time", "n_shards", n_shards);
      current_statement__ = 140;
      context__.validate_dims("data initialization","solve_time","double",
          context__.to_vec(n_shards));
      solve_time = std::vector<double>(n_shards, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 140;
      assign(solve_time, context__.vals_r("solve_time"),
        "assigning variable solve_time");
      current_statement__ = 140;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 140;
        current_statement__ = 140;
        check_greater_or_equal(function__, "solve_time[sym1__]",
                               solve_time[(sym1__ - 1)], 0);}
      current_statement__ = 141;
      validate_non_negative_index("ageAtBMT", "n_shards", n_shards);
      current_statement__ = 142;
      context__.validate_dims("data initialization","ageAtBMT","double",
          context__.to_vec(n_shards));
      ageAtBMT = std::vector<double>(n_shards, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 142;
      assign(ageAtBMT, context__.vals_r("ageAtBMT"),
        "assigning variable ageAtBMT");
      current_statement__ = 142;
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        current_statement__ = 142;
        current_statement__ = 142;
        check_greater_or_equal(function__, "ageAtBMT[sym1__]",
                               ageAtBMT[(sym1__ - 1)], 0);}
      current_statement__ = 143;
      validate_non_negative_index("counts", "numObs", numObs);
      current_statement__ = 144;
      context__.validate_dims("data initialization","counts","double",
          context__.to_vec(numObs));
      counts = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 144;
      assign(counts, context__.vals_r("counts"), "assigning variable counts");
      current_statement__ = 144;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 144;
        current_statement__ = 144;
        check_greater_or_equal(function__, "counts[sym1__]",
                               counts[(sym1__ - 1)], 0);}
      current_statement__ = 145;
      validate_non_negative_index("Nfd", "numObs", numObs);
      current_statement__ = 146;
      context__.validate_dims("data initialization","Nfd","double",
          context__.to_vec(numObs));
      Nfd = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 146;
      assign(Nfd, context__.vals_r("Nfd"), "assigning variable Nfd");
      current_statement__ = 146;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 146;
        current_statement__ = 146;
        check_greater_or_equal(function__, "Nfd[sym1__]", Nfd[(sym1__ - 1)],
                               0);}
      current_statement__ = 147;
      validate_non_negative_index("ki_donor", "numObs", numObs);
      current_statement__ = 148;
      context__.validate_dims("data initialization","ki_donor","double",
          context__.to_vec(numObs));
      ki_donor = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 148;
      assign(ki_donor, context__.vals_r("ki_donor"),
        "assigning variable ki_donor");
      current_statement__ = 148;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 148;
        current_statement__ = 148;
        check_greater_or_equal(function__, "ki_donor[sym1__]",
                               ki_donor[(sym1__ - 1)], 0);}
      current_statement__ = 149;
      validate_non_negative_index("ki_host", "numObs", numObs);
      current_statement__ = 150;
      context__.validate_dims("data initialization","ki_host","double",
          context__.to_vec(numObs));
      ki_host = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 150;
      assign(ki_host, context__.vals_r("ki_host"),
        "assigning variable ki_host");
      current_statement__ = 150;
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        current_statement__ = 150;
        current_statement__ = 150;
        check_greater_or_equal(function__, "ki_host[sym1__]",
                               ki_host[(sym1__ - 1)], 0);}
      current_statement__ = 151;
      validate_non_negative_index("ts_pred1", "numPred", numPred);
      current_statement__ = 152;
      context__.validate_dims("data initialization","ts_pred1","double",
          context__.to_vec(numPred));
      ts_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 152;
      assign(ts_pred1, context__.vals_r("ts_pred1"),
        "assigning variable ts_pred1");
      current_statement__ = 153;
      validate_non_negative_index("ts_pred2", "numPred", numPred);
      current_statement__ = 154;
      context__.validate_dims("data initialization","ts_pred2","double",
          context__.to_vec(numPred));
      ts_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 154;
      assign(ts_pred2, context__.vals_r("ts_pred2"),
        "assigning variable ts_pred2");
      current_statement__ = 155;
      validate_non_negative_index("ts_pred3", "numPred", numPred);
      current_statement__ = 156;
      context__.validate_dims("data initialization","ts_pred3","double",
          context__.to_vec(numPred));
      ts_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 156;
      assign(ts_pred3, context__.vals_r("ts_pred3"),
        "assigning variable ts_pred3");
      current_statement__ = 157;
      validate_non_negative_index("tb_pred1", "numPred", numPred);
      current_statement__ = 158;
      context__.validate_dims("data initialization","tb_pred1","double",
          context__.to_vec(numPred));
      tb_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 158;
      assign(tb_pred1, context__.vals_r("tb_pred1"),
        "assigning variable tb_pred1");
      current_statement__ = 159;
      validate_non_negative_index("tb_pred2", "numPred", numPred);
      current_statement__ = 160;
      context__.validate_dims("data initialization","tb_pred2","double",
          context__.to_vec(numPred));
      tb_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 160;
      assign(tb_pred2, context__.vals_r("tb_pred2"),
        "assigning variable tb_pred2");
      current_statement__ = 161;
      validate_non_negative_index("tb_pred3", "numPred", numPred);
      current_statement__ = 162;
      context__.validate_dims("data initialization","tb_pred3","double",
          context__.to_vec(numPred));
      tb_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 162;
      assign(tb_pred3, context__.vals_r("tb_pred3"),
        "assigning variable tb_pred3");
      current_statement__ = 163;
      validate_non_negative_index("y1", "numObs", numObs);
      current_statement__ = 164;
      y1 = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 165;
      validate_non_negative_index("y2", "numObs", numObs);
      current_statement__ = 166;
      y2 = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 167;
      validate_non_negative_index("y3", "numObs", numObs);
      current_statement__ = 168;
      y3 = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 169;
      validate_non_negative_index("y4", "numObs", numObs);
      current_statement__ = 170;
      y4 = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 171;
      assign(y1, stan::math::log(counts), "assigning variable y1");
      current_statement__ = 172;
      assign(y2, logit_boundary_array(Nfd, pstream__),
        "assigning variable y2");
      current_statement__ = 173;
      assign(y3, logit_boundary_array(ki_donor, pstream__),
        "assigning variable y3");
      current_statement__ = 174;
      assign(y4, logit_boundary_array(ki_host, pstream__),
        "assigning variable y4");
      current_statement__ = 175;
      k_hat_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 175;
      k_hat_1dim__ = (n_shards * 4);
      current_statement__ = 175;
      validate_non_negative_index("k_hat", "n_shards * 4", k_hat_1dim__);
      current_statement__ = 176;
      validate_non_negative_index("y1_mean", "numObs", numObs);
      current_statement__ = 177;
      validate_non_negative_index("y2_mean", "numObs", numObs);
      current_statement__ = 178;
      validate_non_negative_index("y3_mean", "numObs", numObs);
      current_statement__ = 179;
      validate_non_negative_index("y4_mean", "numObs", numObs);
      current_statement__ = 180;
      validate_non_negative_index("chi_counts_mean", "n_shards", n_shards);
      current_statement__ = 181;
      validate_non_negative_index("donor_fractions_mean", "n_shards",
                                  n_shards);
      current_statement__ = 182;
      validate_non_negative_index("host_ki_mean", "n_shards", n_shards);
      current_statement__ = 183;
      validate_non_negative_index("donor_ki_mean", "n_shards", n_shards);
      current_statement__ = 184;
      k_hat_pred_age1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 184;
      k_hat_pred_age1_1dim__ = (numPred * 4);
      current_statement__ = 184;
      validate_non_negative_index("k_hat_pred_age1", "numPred * 4",
                                  k_hat_pred_age1_1dim__);
      current_statement__ = 185;
      k_hat_pred_age2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 185;
      k_hat_pred_age2_1dim__ = (numPred * 4);
      current_statement__ = 185;
      validate_non_negative_index("k_hat_pred_age2", "numPred * 4",
                                  k_hat_pred_age2_1dim__);
      current_statement__ = 186;
      k_hat_pred_age3_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 186;
      k_hat_pred_age3_1dim__ = (numPred * 4);
      current_statement__ = 186;
      validate_non_negative_index("k_hat_pred_age3", "numPred * 4",
                                  k_hat_pred_age3_1dim__);
      current_statement__ = 187;
      validate_non_negative_index("y1_mean_pred_age1", "numPred", numPred);
      current_statement__ = 188;
      validate_non_negative_index("y2_mean_pred_age1", "numPred", numPred);
      current_statement__ = 189;
      validate_non_negative_index("y3_mean_pred1", "numPred", numPred);
      current_statement__ = 190;
      validate_non_negative_index("y4_mean_pred1", "numPred", numPred);
      current_statement__ = 191;
      validate_non_negative_index("y1_mean_pred_age2", "numPred", numPred);
      current_statement__ = 192;
      validate_non_negative_index("y2_mean_pred_age2", "numPred", numPred);
      current_statement__ = 193;
      validate_non_negative_index("y3_mean_pred2", "numPred", numPred);
      current_statement__ = 194;
      validate_non_negative_index("y4_mean_pred2", "numPred", numPred);
      current_statement__ = 195;
      validate_non_negative_index("y1_mean_pred_age3", "numPred", numPred);
      current_statement__ = 196;
      validate_non_negative_index("y2_mean_pred_age3", "numPred", numPred);
      current_statement__ = 197;
      validate_non_negative_index("y3_mean_pred3", "numPred", numPred);
      current_statement__ = 198;
      validate_non_negative_index("y4_mean_pred3", "numPred", numPred);
      current_statement__ = 199;
      validate_non_negative_index("countspred_age1", "numPred", numPred);
      current_statement__ = 200;
      validate_non_negative_index("fdpred_age1", "numPred", numPred);
      current_statement__ = 201;
      validate_non_negative_index("donor_kiprop_pred1", "numPred", numPred);
      current_statement__ = 202;
      validate_non_negative_index("host_kiprop_pred1", "numPred", numPred);
      current_statement__ = 203;
      validate_non_negative_index("countspred_age2", "numPred", numPred);
      current_statement__ = 204;
      validate_non_negative_index("fdpred_age2", "numPred", numPred);
      current_statement__ = 205;
      validate_non_negative_index("donor_kiprop_pred2", "numPred", numPred);
      current_statement__ = 206;
      validate_non_negative_index("host_kiprop_pred2", "numPred", numPred);
      current_statement__ = 207;
      validate_non_negative_index("countspred_age3", "numPred", numPred);
      current_statement__ = 208;
      validate_non_negative_index("fdpred_age3", "numPred", numPred);
      current_statement__ = 209;
      validate_non_negative_index("donor_kiprop_pred3", "numPred", numPred);
      current_statement__ = 210;
      validate_non_negative_index("host_kiprop_pred3", "numPred", numPred);
      current_statement__ = 211;
      validate_non_negative_index("log_lik1", "numObs", numObs);
      current_statement__ = 212;
      validate_non_negative_index("log_lik2", "numObs", numObs);
      current_statement__ = 213;
      validate_non_negative_index("log_lik3", "numObs", numObs);
      current_statement__ = 214;
      validate_non_negative_index("log_lik4", "numObs", numObs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ki67_SHM_T2MZP_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ y0_Log;
      y0_Log = DUMMY_VAR__;
      
      current_statement__ = 1;
      y0_Log = in__.scalar();
      local_scalar_t__ kappa_0;
      kappa_0 = DUMMY_VAR__;
      
      current_statement__ = 2;
      kappa_0 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        kappa_0 = stan::math::lub_constrain(kappa_0, 0, 1, lp__);
      } else {
        current_statement__ = 2;
        kappa_0 = stan::math::lub_constrain(kappa_0, 0, 1);
      }
      local_scalar_t__ psi;
      psi = DUMMY_VAR__;
      
      current_statement__ = 3;
      psi = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        psi = stan::math::lub_constrain(psi, 0, 1, lp__);
      } else {
        current_statement__ = 3;
        psi = stan::math::lub_constrain(psi, 0, 1);
      }
      local_scalar_t__ rho_Log;
      rho_Log = DUMMY_VAR__;
      
      current_statement__ = 4;
      rho_Log = in__.scalar();
      local_scalar_t__ lambda_Log;
      lambda_Log = DUMMY_VAR__;
      
      current_statement__ = 5;
      lambda_Log = in__.scalar();
      local_scalar_t__ Beta;
      Beta = DUMMY_VAR__;
      
      current_statement__ = 6;
      Beta = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        Beta = stan::math::lb_constrain(Beta, 0, lp__);
      } else {
        current_statement__ = 6;
        Beta = stan::math::lb_constrain(Beta, 0);
      }
      local_scalar_t__ sigma1;
      sigma1 = DUMMY_VAR__;
      
      current_statement__ = 7;
      sigma1 = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sigma1 = stan::math::lb_constrain(sigma1, 0, lp__);
      } else {
        current_statement__ = 7;
        sigma1 = stan::math::lb_constrain(sigma1, 0);
      }
      local_scalar_t__ sigma2;
      sigma2 = DUMMY_VAR__;
      
      current_statement__ = 8;
      sigma2 = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        sigma2 = stan::math::lb_constrain(sigma2, 0, lp__);
      } else {
        current_statement__ = 8;
        sigma2 = stan::math::lb_constrain(sigma2, 0);
      }
      local_scalar_t__ sigma3;
      sigma3 = DUMMY_VAR__;
      
      current_statement__ = 9;
      sigma3 = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        sigma3 = stan::math::lb_constrain(sigma3, 0, lp__);
      } else {
        current_statement__ = 9;
        sigma3 = stan::math::lb_constrain(sigma3, 0);
      }
      local_scalar_t__ sigma4;
      sigma4 = DUMMY_VAR__;
      
      current_statement__ = 10;
      sigma4 = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        sigma4 = stan::math::lb_constrain(sigma4, 0, lp__);
      } else {
        current_statement__ = 10;
        sigma4 = stan::math::lb_constrain(sigma4, 0);
      }
      std::vector<local_scalar_t__> k_hat;
      k_hat = std::vector<local_scalar_t__>(k_hat_1dim__, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> y1_mean;
      y1_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> y2_mean;
      y2_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> y3_mean;
      y3_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> y4_mean;
      y4_mean = std::vector<local_scalar_t__>(numObs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> chi_counts_mean;
      chi_counts_mean = std::vector<local_scalar_t__>(n_shards, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> donor_fractions_mean;
      donor_fractions_mean = std::vector<local_scalar_t__>(n_shards, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> host_ki_mean;
      host_ki_mean = std::vector<local_scalar_t__>(n_shards, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> donor_ki_mean;
      donor_ki_mean = std::vector<local_scalar_t__>(n_shards, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> parms;
      parms = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> init_cond;
      init_cond = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      local_scalar_t__ y0;
      y0 = DUMMY_VAR__;
      
      current_statement__ = 22;
      y0 = stan::math::exp(y0_Log);
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 23;
      rho = stan::math::exp(rho_Log);
      local_scalar_t__ lambda;
      lambda = DUMMY_VAR__;
      
      current_statement__ = 24;
      lambda = stan::math::exp(lambda_Log);
      current_statement__ = 25;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(1));
      current_statement__ = 26;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(2));
      current_statement__ = 27;
      assign(init_cond, (y0 * kappa_0),
        "assigning variable init_cond", index_uni(3));
      current_statement__ = 28;
      assign(init_cond, (y0 * (1 - kappa_0)),
        "assigning variable init_cond", index_uni(4));
      current_statement__ = 29;
      assign(parms, psi, "assigning variable parms", index_uni(1));
      current_statement__ = 30;
      assign(parms, rho, "assigning variable parms", index_uni(2));
      current_statement__ = 31;
      assign(parms, lambda, "assigning variable parms", index_uni(3));
      current_statement__ = 32;
      assign(parms, Beta, "assigning variable parms", index_uni(4));
      current_statement__ = 33;
      assign(k_hat,
        solve_ode_chi(solve_time, ageAtBMT, init_cond, parms, pstream__),
        "assigning variable k_hat");
      current_statement__ = 39;
      for (int i = 1; i <= n_shards; ++i) {
        current_statement__ = 34;
        assign(chi_counts_mean,
          (((rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) +
              rvalue(k_hat, "k_hat", index_uni(((4 * i) - 2)))) +
             rvalue(k_hat, "k_hat", index_uni(((4 * i) - 1)))) +
            rvalue(k_hat, "k_hat", index_uni((4 * i)))),
          "assigning variable chi_counts_mean", index_uni(i));
        current_statement__ = 35;
        assign(donor_fractions_mean,
          ((rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) +
             rvalue(k_hat, "k_hat", index_uni(((4 * i) - 2)))) /
            rvalue(chi_counts_mean, "chi_counts_mean", index_uni(i))),
          "assigning variable donor_fractions_mean", index_uni(i));
        current_statement__ = 36;
        assign(donor_ki_mean,
          (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) /
            (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) +
              rvalue(k_hat, "k_hat", index_uni(((4 * i) - 2))))),
          "assigning variable donor_ki_mean", index_uni(i));
        current_statement__ = 37;
        assign(host_ki_mean,
          (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 1))) /
            (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 1))) +
              rvalue(k_hat, "k_hat", index_uni((4 * i))))),
          "assigning variable host_ki_mean", index_uni(i));}
      current_statement__ = 45;
      for (int i = 1; i <= numObs; ++i) {
        current_statement__ = 40;
        assign(y1_mean,
          rvalue(chi_counts_mean, "chi_counts_mean",
            index_uni(rvalue(time_index, "time_index", index_uni(i)))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 41;
        assign(y2_mean,
          (rvalue(donor_fractions_mean, "donor_fractions_mean",
             index_uni(rvalue(time_index, "time_index", index_uni(i)))) /
            (rvalue(y1_mean, "y1_mean", index_uni(i)) *
              Chi_T1(rvalue(dpBMT, "dpBMT", index_uni(i)), pstream__))),
          "assigning variable y2_mean", index_uni(i));
        current_statement__ = 42;
        assign(y3_mean,
          rvalue(donor_ki_mean, "donor_ki_mean",
            index_uni(rvalue(time_index, "time_index", index_uni(i)))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 43;
        assign(y4_mean,
          rvalue(host_ki_mean, "host_ki_mean",
            index_uni(rvalue(time_index, "time_index", index_uni(i)))),
          "assigning variable y4_mean", index_uni(i));}
      {
        current_statement__ = 118;
        lp_accum__.add(normal_lpdf<propto__>(psi, 0.5, 0.25));
        current_statement__ = 119;
        lp_accum__.add(normal_lpdf<propto__>(y0_Log, 14, 1));
        current_statement__ = 120;
        lp_accum__.add(normal_lpdf<propto__>(kappa_0, 0.1, 0.15));
        current_statement__ = 121;
        lp_accum__.add(normal_lpdf<propto__>(rho_Log, -5, 1.2));
        current_statement__ = 122;
        lp_accum__.add(normal_lpdf<propto__>(lambda_Log, -4, 1.2));
        current_statement__ = 123;
        lp_accum__.add(normal_lpdf<propto__>(Beta, 3.5, 0.8));
        current_statement__ = 124;
        lp_accum__.add(normal_lpdf<propto__>(sigma1, 0.6, 0.2));
        current_statement__ = 125;
        lp_accum__.add(normal_lpdf<propto__>(sigma2, 3, 0.5));
        current_statement__ = 126;
        lp_accum__.add(normal_lpdf<propto__>(sigma3, 0.3, 0.2));
        current_statement__ = 127;
        lp_accum__.add(normal_lpdf<propto__>(sigma4, 0.9, 2));
        current_statement__ = 128;
        lp_accum__.add(
          normal_lpdf<propto__>(y1, stan::math::log(y1_mean), sigma1));
        current_statement__ = 129;
        lp_accum__.add(
          normal_lpdf<propto__>(y2, logit_boundary_array(y2_mean, pstream__),
            sigma2));
        current_statement__ = 130;
        lp_accum__.add(
          normal_lpdf<propto__>(y3, logit_boundary_array(y3_mean, pstream__),
            sigma3));
        current_statement__ = 131;
        lp_accum__.add(
          normal_lpdf<propto__>(y4, logit_boundary_array(y4_mean, pstream__),
            sigma4));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ki67_SHM_T2MZP_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double y0_Log;
      y0_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      y0_Log = in__.scalar();
      double kappa_0;
      kappa_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kappa_0 = in__.scalar();
      current_statement__ = 2;
      kappa_0 = stan::math::lub_constrain(kappa_0, 0, 1);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      psi = in__.scalar();
      current_statement__ = 3;
      psi = stan::math::lub_constrain(psi, 0, 1);
      double rho_Log;
      rho_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      rho_Log = in__.scalar();
      double lambda_Log;
      lambda_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lambda_Log = in__.scalar();
      double Beta;
      Beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta = in__.scalar();
      current_statement__ = 6;
      Beta = stan::math::lb_constrain(Beta, 0);
      double sigma1;
      sigma1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma1 = in__.scalar();
      current_statement__ = 7;
      sigma1 = stan::math::lb_constrain(sigma1, 0);
      double sigma2;
      sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma2 = in__.scalar();
      current_statement__ = 8;
      sigma2 = stan::math::lb_constrain(sigma2, 0);
      double sigma3;
      sigma3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma3 = in__.scalar();
      current_statement__ = 9;
      sigma3 = stan::math::lb_constrain(sigma3, 0);
      double sigma4;
      sigma4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma4 = in__.scalar();
      current_statement__ = 10;
      sigma4 = stan::math::lb_constrain(sigma4, 0);
      std::vector<double> k_hat;
      k_hat = std::vector<double>(k_hat_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y1_mean;
      y1_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean;
      y2_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean;
      y3_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean;
      y4_mean = std::vector<double>(numObs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> chi_counts_mean;
      chi_counts_mean = std::vector<double>(n_shards, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_fractions_mean;
      donor_fractions_mean = std::vector<double>(n_shards, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_ki_mean;
      host_ki_mean = std::vector<double>(n_shards, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_ki_mean;
      donor_ki_mean = std::vector<double>(n_shards, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> parms;
      parms = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> init_cond;
      init_cond = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      double y0;
      y0 = std::numeric_limits<double>::quiet_NaN();
      
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      double lambda;
      lambda = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(y0_Log);
      vars__.emplace_back(kappa_0);
      vars__.emplace_back(psi);
      vars__.emplace_back(rho_Log);
      vars__.emplace_back(lambda_Log);
      vars__.emplace_back(Beta);
      vars__.emplace_back(sigma1);
      vars__.emplace_back(sigma2);
      vars__.emplace_back(sigma3);
      vars__.emplace_back(sigma4);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 22;
      y0 = stan::math::exp(y0_Log);
      current_statement__ = 23;
      rho = stan::math::exp(rho_Log);
      current_statement__ = 24;
      lambda = stan::math::exp(lambda_Log);
      current_statement__ = 25;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(1));
      current_statement__ = 26;
      assign(init_cond, 0.0, "assigning variable init_cond", index_uni(2));
      current_statement__ = 27;
      assign(init_cond, (y0 * kappa_0),
        "assigning variable init_cond", index_uni(3));
      current_statement__ = 28;
      assign(init_cond, (y0 * (1 - kappa_0)),
        "assigning variable init_cond", index_uni(4));
      current_statement__ = 29;
      assign(parms, psi, "assigning variable parms", index_uni(1));
      current_statement__ = 30;
      assign(parms, rho, "assigning variable parms", index_uni(2));
      current_statement__ = 31;
      assign(parms, lambda, "assigning variable parms", index_uni(3));
      current_statement__ = 32;
      assign(parms, Beta, "assigning variable parms", index_uni(4));
      current_statement__ = 33;
      assign(k_hat,
        solve_ode_chi(solve_time, ageAtBMT, init_cond, parms, pstream__),
        "assigning variable k_hat");
      current_statement__ = 39;
      for (int i = 1; i <= n_shards; ++i) {
        current_statement__ = 34;
        assign(chi_counts_mean,
          (((rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) +
              rvalue(k_hat, "k_hat", index_uni(((4 * i) - 2)))) +
             rvalue(k_hat, "k_hat", index_uni(((4 * i) - 1)))) +
            rvalue(k_hat, "k_hat", index_uni((4 * i)))),
          "assigning variable chi_counts_mean", index_uni(i));
        current_statement__ = 35;
        assign(donor_fractions_mean,
          ((rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) +
             rvalue(k_hat, "k_hat", index_uni(((4 * i) - 2)))) /
            rvalue(chi_counts_mean, "chi_counts_mean", index_uni(i))),
          "assigning variable donor_fractions_mean", index_uni(i));
        current_statement__ = 36;
        assign(donor_ki_mean,
          (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) /
            (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 3))) +
              rvalue(k_hat, "k_hat", index_uni(((4 * i) - 2))))),
          "assigning variable donor_ki_mean", index_uni(i));
        current_statement__ = 37;
        assign(host_ki_mean,
          (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 1))) /
            (rvalue(k_hat, "k_hat", index_uni(((4 * i) - 1))) +
              rvalue(k_hat, "k_hat", index_uni((4 * i))))),
          "assigning variable host_ki_mean", index_uni(i));}
      current_statement__ = 45;
      for (int i = 1; i <= numObs; ++i) {
        current_statement__ = 40;
        assign(y1_mean,
          rvalue(chi_counts_mean, "chi_counts_mean",
            index_uni(rvalue(time_index, "time_index", index_uni(i)))),
          "assigning variable y1_mean", index_uni(i));
        current_statement__ = 41;
        assign(y2_mean,
          (rvalue(donor_fractions_mean, "donor_fractions_mean",
             index_uni(rvalue(time_index, "time_index", index_uni(i)))) /
            (rvalue(y1_mean, "y1_mean", index_uni(i)) *
              Chi_T1(rvalue(dpBMT, "dpBMT", index_uni(i)), pstream__))),
          "assigning variable y2_mean", index_uni(i));
        current_statement__ = 42;
        assign(y3_mean,
          rvalue(donor_ki_mean, "donor_ki_mean",
            index_uni(rvalue(time_index, "time_index", index_uni(i)))),
          "assigning variable y3_mean", index_uni(i));
        current_statement__ = 43;
        assign(y4_mean,
          rvalue(host_ki_mean, "host_ki_mean",
            index_uni(rvalue(time_index, "time_index", index_uni(i)))),
          "assigning variable y4_mean", index_uni(i));}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= k_hat_1dim__; ++sym1__) {
          vars__.emplace_back(k_hat[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(y1_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(y2_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(y3_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
          vars__.emplace_back(y4_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(chi_counts_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(donor_fractions_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(host_ki_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
          vars__.emplace_back(donor_ki_mean[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          vars__.emplace_back(parms[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          vars__.emplace_back(init_cond[(sym1__ - 1)]);}
        vars__.emplace_back(y0);
        vars__.emplace_back(rho);
        vars__.emplace_back(lambda);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> k_hat_pred_age1;
      k_hat_pred_age1 = std::vector<double>(k_hat_pred_age1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> k_hat_pred_age2;
      k_hat_pred_age2 = std::vector<double>(k_hat_pred_age2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> k_hat_pred_age3;
      k_hat_pred_age3 = std::vector<double>(k_hat_pred_age3_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y1_mean_pred_age1;
      y1_mean_pred_age1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred_age1;
      y2_mean_pred_age1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred1;
      y3_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred1;
      y4_mean_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y1_mean_pred_age2;
      y1_mean_pred_age2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred_age2;
      y2_mean_pred_age2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred2;
      y3_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred2;
      y4_mean_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y1_mean_pred_age3;
      y1_mean_pred_age3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y2_mean_pred_age3;
      y2_mean_pred_age3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y3_mean_pred3;
      y3_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> y4_mean_pred3;
      y4_mean_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> countspred_age1;
      countspred_age1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> fdpred_age1;
      fdpred_age1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_kiprop_pred1;
      donor_kiprop_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_kiprop_pred1;
      host_kiprop_pred1 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> countspred_age2;
      countspred_age2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> fdpred_age2;
      fdpred_age2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_kiprop_pred2;
      donor_kiprop_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_kiprop_pred2;
      host_kiprop_pred2 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> countspred_age3;
      countspred_age3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> fdpred_age3;
      fdpred_age3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> donor_kiprop_pred3;
      donor_kiprop_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> host_kiprop_pred3;
      host_kiprop_pred3 = std::vector<double>(numPred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik1;
      log_lik1 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik1, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik2;
      log_lik2 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik2, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik3;
      log_lik3 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik3, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik4;
      log_lik4 = Eigen::Matrix<double, -1, 1>(numObs);
      stan::math::fill(log_lik4, std::numeric_limits<double>::quiet_NaN());
      
      double rho_inv;
      rho_inv = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 77;
      rho_inv = (1 / rho);
      double lambda_inv;
      lambda_inv = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 78;
      lambda_inv = (1 / lambda);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 79;
      delta = (lambda + rho);
      double delta_inv;
      delta_inv = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 80;
      delta_inv = (1 / delta);
      current_statement__ = 81;
      assign(k_hat_pred_age1,
        solve_ode_chi(ts_pred1, tb_pred1, init_cond, parms, pstream__),
        "assigning variable k_hat_pred_age1");
      current_statement__ = 82;
      assign(k_hat_pred_age2,
        solve_ode_chi(ts_pred2, tb_pred2, init_cond, parms, pstream__),
        "assigning variable k_hat_pred_age2");
      current_statement__ = 83;
      assign(k_hat_pred_age3,
        solve_ode_chi(ts_pred3, tb_pred3, init_cond, parms, pstream__),
        "assigning variable k_hat_pred_age3");
      current_statement__ = 91;
      for (int i = 1; i <= numPred; ++i) {
        current_statement__ = 84;
        assign(y1_mean_pred_age1,
          (((rvalue(k_hat_pred_age1, "k_hat_pred_age1",
               index_uni(((4 * i) - 3))) +
              rvalue(k_hat_pred_age1, "k_hat_pred_age1",
                index_uni(((4 * i) - 2)))) +
             rvalue(k_hat_pred_age1, "k_hat_pred_age1",
               index_uni(((4 * i) - 1)))) +
            rvalue(k_hat_pred_age1, "k_hat_pred_age1", index_uni((4 * i)))),
          "assigning variable y1_mean_pred_age1", index_uni(i));
        current_statement__ = 85;
        assign(countspred_age1,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred_age1, "y1_mean_pred_age1", index_uni(i))),
              sigma1, base_rng__)),
          "assigning variable countspred_age1", index_uni(i));
        current_statement__ = 86;
        assign(y1_mean_pred_age2,
          (((rvalue(k_hat_pred_age2, "k_hat_pred_age2",
               index_uni(((4 * i) - 3))) +
              rvalue(k_hat_pred_age2, "k_hat_pred_age2",
                index_uni(((4 * i) - 2)))) +
             rvalue(k_hat_pred_age2, "k_hat_pred_age2",
               index_uni(((4 * i) - 1)))) +
            rvalue(k_hat_pred_age2, "k_hat_pred_age2", index_uni((4 * i)))),
          "assigning variable y1_mean_pred_age2", index_uni(i));
        current_statement__ = 87;
        assign(countspred_age2,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred_age2, "y1_mean_pred_age2", index_uni(i))),
              sigma1, base_rng__)),
          "assigning variable countspred_age2", index_uni(i));
        current_statement__ = 88;
        assign(y1_mean_pred_age3,
          (((rvalue(k_hat_pred_age3, "k_hat_pred_age3",
               index_uni(((4 * i) - 3))) +
              rvalue(k_hat_pred_age3, "k_hat_pred_age3",
                index_uni(((4 * i) - 2)))) +
             rvalue(k_hat_pred_age3, "k_hat_pred_age3",
               index_uni(((4 * i) - 1)))) +
            rvalue(k_hat_pred_age3, "k_hat_pred_age3", index_uni((4 * i)))),
          "assigning variable y1_mean_pred_age3", index_uni(i));
        current_statement__ = 89;
        assign(countspred_age3,
          stan::math::exp(
            normal_rng(
              stan::math::log(
                rvalue(y1_mean_pred_age3, "y1_mean_pred_age3", index_uni(i))),
              sigma1, base_rng__)),
          "assigning variable countspred_age3", index_uni(i));}
      current_statement__ = 111;
      for (int i = 2; i <= numPred; ++i) {
        current_statement__ = 92;
        assign(y2_mean_pred_age1,
          ((rvalue(k_hat_pred_age1, "k_hat_pred_age1",
              index_uni(((4 * i) - 3))) +
             rvalue(k_hat_pred_age1, "k_hat_pred_age1",
               index_uni(((4 * i) - 2)))) /
            (rvalue(y1_mean_pred_age1, "y1_mean_pred_age1", index_uni(i)) *
              Chi_T1(
                (rvalue(ts_pred1, "ts_pred1", index_uni(i)) -
                  rvalue(tb_pred1, "tb_pred1", index_uni(i))), pstream__))),
          "assigning variable y2_mean_pred_age1", index_uni(i));
        current_statement__ = 93;
        assign(fdpred_age1,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y2_mean_pred_age1, "y2_mean_pred_age1", index_uni(i)), pstream__),
              sigma2, base_rng__), pstream__),
          "assigning variable fdpred_age1", index_uni(i));
        current_statement__ = 94;
        assign(y3_mean_pred1,
          (rvalue(k_hat_pred_age1, "k_hat_pred_age1",
             index_uni(((4 * i) - 3))) /
            (rvalue(k_hat_pred_age1, "k_hat_pred_age1",
               index_uni(((4 * i) - 3))) +
              rvalue(k_hat_pred_age1, "k_hat_pred_age1",
                index_uni(((4 * i) - 2))))),
          "assigning variable y3_mean_pred1", index_uni(i));
        current_statement__ = 95;
        assign(donor_kiprop_pred1,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y3_mean_pred1, "y3_mean_pred1", index_uni(i)), pstream__),
              sigma3, base_rng__), pstream__),
          "assigning variable donor_kiprop_pred1", index_uni(i));
        current_statement__ = 96;
        assign(y4_mean_pred1,
          (rvalue(k_hat_pred_age1, "k_hat_pred_age1",
             index_uni(((4 * i) - 1))) /
            (rvalue(k_hat_pred_age1, "k_hat_pred_age1",
               index_uni(((4 * i) - 1))) +
              rvalue(k_hat_pred_age1, "k_hat_pred_age1", index_uni((4 * i))))),
          "assigning variable y4_mean_pred1", index_uni(i));
        current_statement__ = 97;
        assign(host_kiprop_pred1,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y4_mean_pred1, "y4_mean_pred1", index_uni(i)), pstream__),
              sigma4, base_rng__), pstream__),
          "assigning variable host_kiprop_pred1", index_uni(i));
        current_statement__ = 98;
        assign(y2_mean_pred_age2,
          ((rvalue(k_hat_pred_age2, "k_hat_pred_age2",
              index_uni(((4 * i) - 3))) +
             rvalue(k_hat_pred_age2, "k_hat_pred_age2",
               index_uni(((4 * i) - 2)))) /
            (rvalue(y1_mean_pred_age2, "y1_mean_pred_age2", index_uni(i)) *
              Chi_T1(
                (rvalue(ts_pred2, "ts_pred2", index_uni(i)) -
                  rvalue(tb_pred2, "tb_pred2", index_uni(i))), pstream__))),
          "assigning variable y2_mean_pred_age2", index_uni(i));
        current_statement__ = 99;
        assign(fdpred_age2,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y2_mean_pred_age2, "y2_mean_pred_age2", index_uni(i)), pstream__),
              sigma2, base_rng__), pstream__),
          "assigning variable fdpred_age2", index_uni(i));
        current_statement__ = 100;
        assign(y3_mean_pred2,
          (rvalue(k_hat_pred_age2, "k_hat_pred_age2",
             index_uni(((4 * i) - 3))) /
            (rvalue(k_hat_pred_age2, "k_hat_pred_age2",
               index_uni(((4 * i) - 3))) +
              rvalue(k_hat_pred_age2, "k_hat_pred_age2",
                index_uni(((4 * i) - 2))))),
          "assigning variable y3_mean_pred2", index_uni(i));
        current_statement__ = 101;
        assign(donor_kiprop_pred2,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y3_mean_pred2, "y3_mean_pred2", index_uni(i)), pstream__),
              sigma3, base_rng__), pstream__),
          "assigning variable donor_kiprop_pred2", index_uni(i));
        current_statement__ = 102;
        assign(y4_mean_pred2,
          (rvalue(k_hat_pred_age2, "k_hat_pred_age2",
             index_uni(((4 * i) - 1))) /
            (rvalue(k_hat_pred_age2, "k_hat_pred_age2",
               index_uni(((4 * i) - 1))) +
              rvalue(k_hat_pred_age2, "k_hat_pred_age2", index_uni((4 * i))))),
          "assigning variable y4_mean_pred2", index_uni(i));
        current_statement__ = 103;
        assign(host_kiprop_pred2,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y4_mean_pred2, "y4_mean_pred2", index_uni(i)), pstream__),
              sigma4, base_rng__), pstream__),
          "assigning variable host_kiprop_pred2", index_uni(i));
        current_statement__ = 104;
        assign(y2_mean_pred_age3,
          ((rvalue(k_hat_pred_age3, "k_hat_pred_age3",
              index_uni(((4 * i) - 3))) +
             rvalue(k_hat_pred_age3, "k_hat_pred_age3",
               index_uni(((4 * i) - 2)))) /
            (rvalue(y1_mean_pred_age3, "y1_mean_pred_age3", index_uni(i)) *
              Chi_T1(
                (rvalue(ts_pred3, "ts_pred3", index_uni(i)) -
                  rvalue(tb_pred3, "tb_pred3", index_uni(i))), pstream__))),
          "assigning variable y2_mean_pred_age3", index_uni(i));
        current_statement__ = 105;
        assign(fdpred_age3,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y2_mean_pred_age3, "y2_mean_pred_age3", index_uni(i)), pstream__),
              sigma2, base_rng__), pstream__),
          "assigning variable fdpred_age3", index_uni(i));
        current_statement__ = 106;
        assign(y3_mean_pred3,
          (rvalue(k_hat_pred_age3, "k_hat_pred_age3",
             index_uni(((4 * i) - 3))) /
            (rvalue(k_hat_pred_age3, "k_hat_pred_age3",
               index_uni(((4 * i) - 3))) +
              rvalue(k_hat_pred_age3, "k_hat_pred_age3",
                index_uni(((4 * i) - 2))))),
          "assigning variable y3_mean_pred3", index_uni(i));
        current_statement__ = 107;
        assign(donor_kiprop_pred3,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y3_mean_pred3, "y3_mean_pred3", index_uni(i)), pstream__),
              sigma3, base_rng__), pstream__),
          "assigning variable donor_kiprop_pred3", index_uni(i));
        current_statement__ = 108;
        assign(y4_mean_pred3,
          (rvalue(k_hat_pred_age3, "k_hat_pred_age3",
             index_uni(((4 * i) - 1))) /
            (rvalue(k_hat_pred_age3, "k_hat_pred_age3",
               index_uni(((4 * i) - 1))) +
              rvalue(k_hat_pred_age3, "k_hat_pred_age3", index_uni((4 * i))))),
          "assigning variable y4_mean_pred3", index_uni(i));
        current_statement__ = 109;
        assign(host_kiprop_pred3,
          expit_boundary(
            normal_rng(
              logit_boundary(
                rvalue(y4_mean_pred3, "y4_mean_pred3", index_uni(i)), pstream__),
              sigma4, base_rng__), pstream__),
          "assigning variable host_kiprop_pred3", index_uni(i));}
      current_statement__ = 117;
      for (int n = 1; n <= numObs; ++n) {
        current_statement__ = 112;
        assign(log_lik1,
          normal_lpdf<false>(rvalue(y1, "y1", index_uni(n)),
            stan::math::log(rvalue(y1_mean, "y1_mean", index_uni(n))),
            sigma1), "assigning variable log_lik1", index_uni(n));
        current_statement__ = 113;
        assign(log_lik2,
          normal_lpdf<false>(rvalue(y2, "y2", index_uni(n)),
            logit_boundary(
              rvalue(y2_mean, "y2_mean", index_uni(n)), pstream__), sigma2),
          "assigning variable log_lik2", index_uni(n));
        current_statement__ = 114;
        assign(log_lik3,
          normal_lpdf<false>(rvalue(y3, "y3", index_uni(n)),
            logit_boundary(
              rvalue(y3_mean, "y3_mean", index_uni(n)), pstream__), sigma3),
          "assigning variable log_lik3", index_uni(n));
        current_statement__ = 115;
        assign(log_lik4,
          normal_lpdf<false>(rvalue(y4, "y4", index_uni(n)),
            logit_boundary(
              rvalue(y4_mean, "y4_mean", index_uni(n)), pstream__), sigma4),
          "assigning variable log_lik4", index_uni(n));}
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age1_1dim__; ++sym1__) {
        vars__.emplace_back(k_hat_pred_age1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age2_1dim__; ++sym1__) {
        vars__.emplace_back(k_hat_pred_age2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age3_1dim__; ++sym1__) {
        vars__.emplace_back(k_hat_pred_age3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred_age1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred_age1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred_age2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred_age2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y1_mean_pred_age3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y2_mean_pred_age3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y3_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(y4_mean_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(countspred_age1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(fdpred_age1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_kiprop_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_kiprop_pred1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(countspred_age2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(fdpred_age2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_kiprop_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_kiprop_pred2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(countspred_age3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(fdpred_age3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(donor_kiprop_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        vars__.emplace_back(host_kiprop_pred3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik3[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        vars__.emplace_back(log_lik4[(sym1__ - 1)]);}
      vars__.emplace_back(rho_inv);
      vars__.emplace_back(lambda_inv);
      vars__.emplace_back(delta);
      vars__.emplace_back(delta_inv);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double y0_Log;
      y0_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      y0_Log = context__.vals_r("y0_Log")[(1 - 1)];
      double kappa_0;
      kappa_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kappa_0 = context__.vals_r("kappa_0")[(1 - 1)];
      double kappa_0_free__;
      kappa_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      kappa_0_free__ = stan::math::lub_free(kappa_0, 0, 1);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      psi = context__.vals_r("psi")[(1 - 1)];
      double psi_free__;
      psi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      psi_free__ = stan::math::lub_free(psi, 0, 1);
      double rho_Log;
      rho_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      rho_Log = context__.vals_r("rho_Log")[(1 - 1)];
      double lambda_Log;
      lambda_Log = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lambda_Log = context__.vals_r("lambda_Log")[(1 - 1)];
      double Beta;
      Beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta = context__.vals_r("Beta")[(1 - 1)];
      double Beta_free__;
      Beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      Beta_free__ = stan::math::lb_free(Beta, 0);
      double sigma1;
      sigma1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma1 = context__.vals_r("sigma1")[(1 - 1)];
      double sigma1_free__;
      sigma1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sigma1_free__ = stan::math::lb_free(sigma1, 0);
      double sigma2;
      sigma2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma2 = context__.vals_r("sigma2")[(1 - 1)];
      double sigma2_free__;
      sigma2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma2_free__ = stan::math::lb_free(sigma2, 0);
      double sigma3;
      sigma3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma3 = context__.vals_r("sigma3")[(1 - 1)];
      double sigma3_free__;
      sigma3_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma3_free__ = stan::math::lb_free(sigma3, 0);
      double sigma4;
      sigma4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma4 = context__.vals_r("sigma4")[(1 - 1)];
      double sigma4_free__;
      sigma4_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma4_free__ = stan::math::lb_free(sigma4, 0);
      vars__.emplace_back(y0_Log);
      vars__.emplace_back(kappa_0_free__);
      vars__.emplace_back(psi_free__);
      vars__.emplace_back(rho_Log);
      vars__.emplace_back(lambda_Log);
      vars__.emplace_back(Beta_free__);
      vars__.emplace_back(sigma1_free__);
      vars__.emplace_back(sigma2_free__);
      vars__.emplace_back(sigma3_free__);
      vars__.emplace_back(sigma4_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("y0_Log");
    names__.emplace_back("kappa_0");
    names__.emplace_back("psi");
    names__.emplace_back("rho_Log");
    names__.emplace_back("lambda_Log");
    names__.emplace_back("Beta");
    names__.emplace_back("sigma1");
    names__.emplace_back("sigma2");
    names__.emplace_back("sigma3");
    names__.emplace_back("sigma4");
    names__.emplace_back("k_hat");
    names__.emplace_back("y1_mean");
    names__.emplace_back("y2_mean");
    names__.emplace_back("y3_mean");
    names__.emplace_back("y4_mean");
    names__.emplace_back("chi_counts_mean");
    names__.emplace_back("donor_fractions_mean");
    names__.emplace_back("host_ki_mean");
    names__.emplace_back("donor_ki_mean");
    names__.emplace_back("parms");
    names__.emplace_back("init_cond");
    names__.emplace_back("y0");
    names__.emplace_back("rho");
    names__.emplace_back("lambda");
    names__.emplace_back("k_hat_pred_age1");
    names__.emplace_back("k_hat_pred_age2");
    names__.emplace_back("k_hat_pred_age3");
    names__.emplace_back("y1_mean_pred_age1");
    names__.emplace_back("y2_mean_pred_age1");
    names__.emplace_back("y3_mean_pred1");
    names__.emplace_back("y4_mean_pred1");
    names__.emplace_back("y1_mean_pred_age2");
    names__.emplace_back("y2_mean_pred_age2");
    names__.emplace_back("y3_mean_pred2");
    names__.emplace_back("y4_mean_pred2");
    names__.emplace_back("y1_mean_pred_age3");
    names__.emplace_back("y2_mean_pred_age3");
    names__.emplace_back("y3_mean_pred3");
    names__.emplace_back("y4_mean_pred3");
    names__.emplace_back("countspred_age1");
    names__.emplace_back("fdpred_age1");
    names__.emplace_back("donor_kiprop_pred1");
    names__.emplace_back("host_kiprop_pred1");
    names__.emplace_back("countspred_age2");
    names__.emplace_back("fdpred_age2");
    names__.emplace_back("donor_kiprop_pred2");
    names__.emplace_back("host_kiprop_pred2");
    names__.emplace_back("countspred_age3");
    names__.emplace_back("fdpred_age3");
    names__.emplace_back("donor_kiprop_pred3");
    names__.emplace_back("host_kiprop_pred3");
    names__.emplace_back("log_lik1");
    names__.emplace_back("log_lik2");
    names__.emplace_back("log_lik3");
    names__.emplace_back("log_lik4");
    names__.emplace_back("rho_inv");
    names__.emplace_back("lambda_inv");
    names__.emplace_back("delta");
    names__.emplace_back("delta_inv");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(k_hat_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_shards)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(k_hat_pred_age1_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(k_hat_pred_age2_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(k_hat_pred_age3_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numPred)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(numObs)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "y0_Log");
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "rho_Log");
    param_names__.emplace_back(std::string() + "lambda_Log");
    param_names__.emplace_back(std::string() + "Beta");
    param_names__.emplace_back(std::string() + "sigma1");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "sigma3");
    param_names__.emplace_back(std::string() + "sigma4");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k_hat_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi_counts_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_fractions_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "parms" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "y0");
      param_names__.emplace_back(std::string() + "rho");
      param_names__.emplace_back(std::string() + "lambda");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age1_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat_pred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat_pred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age3_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat_pred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "fdpred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_kiprop_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_kiprop_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "fdpred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_kiprop_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_kiprop_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "fdpred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_kiprop_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_kiprop_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik4" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "rho_inv");
      param_names__.emplace_back(std::string() + "lambda_inv");
      param_names__.emplace_back(std::string() + "delta");
      param_names__.emplace_back(std::string() + "delta_inv");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "y0_Log");
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "psi");
    param_names__.emplace_back(std::string() + "rho_Log");
    param_names__.emplace_back(std::string() + "lambda_Log");
    param_names__.emplace_back(std::string() + "Beta");
    param_names__.emplace_back(std::string() + "sigma1");
    param_names__.emplace_back(std::string() + "sigma2");
    param_names__.emplace_back(std::string() + "sigma3");
    param_names__.emplace_back(std::string() + "sigma4");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= k_hat_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi_counts_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_fractions_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_ki_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_shards; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_ki_mean" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "parms" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "init_cond" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "y0");
      param_names__.emplace_back(std::string() + "rho");
      param_names__.emplace_back(std::string() + "lambda");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age1_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat_pred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age2_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat_pred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= k_hat_pred_age3_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "k_hat_pred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y1_mean_pred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y2_mean_pred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y3_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y4_mean_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "fdpred_age1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_kiprop_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_kiprop_pred1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "fdpred_age2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_kiprop_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_kiprop_pred2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "countspred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "fdpred_age3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "donor_kiprop_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numPred; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "host_kiprop_pred3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik1" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik2" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik3" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= numObs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik4" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "rho_inv");
      param_names__.emplace_back(std::string() + "lambda_inv");
      param_names__.emplace_back(std::string() + "delta");
      param_names__.emplace_back(std::string() + "delta_inv");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"y0_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_hat\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"chi_counts_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"donor_fractions_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"host_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"donor_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"parms\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k_hat_pred_age1\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_pred_age1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"k_hat_pred_age2\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_pred_age2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"k_hat_pred_age3\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_pred_age3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"fdpred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_kiprop_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_kiprop_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"fdpred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_kiprop_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_kiprop_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"fdpred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_kiprop_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_kiprop_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik3\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik4\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"rho_inv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lambda_inv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"delta_inv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    std::stringstream s__;
    s__ << "[{\"name\":\"y0_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_Log\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_hat\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y1_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y2_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y3_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y4_mean\",\"type\":{\"name\":\"array\",\"length\":" << numObs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"chi_counts_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"donor_fractions_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"host_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"donor_ki_mean\",\"type\":{\"name\":\"array\",\"length\":" << n_shards << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"parms\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"init_cond\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"k_hat_pred_age1\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_pred_age1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"k_hat_pred_age2\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_pred_age2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"k_hat_pred_age3\",\"type\":{\"name\":\"array\",\"length\":" << k_hat_pred_age3_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y1_mean_pred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y2_mean_pred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y3_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y4_mean_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"fdpred_age1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_kiprop_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_kiprop_pred1\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"fdpred_age2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_kiprop_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_kiprop_pred2\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"countspred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"fdpred_age3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"donor_kiprop_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"host_kiprop_pred3\",\"type\":{\"name\":\"array\",\"length\":" << numPred << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik1\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik2\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik3\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik4\",\"type\":{\"name\":\"vector\",\"length\":" << numObs << "},\"block\":\"generated_quantities\"},{\"name\":\"rho_inv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lambda_inv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"delta_inv\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = ki67_SHM_T2MZP_model_namespace::ki67_SHM_T2MZP_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return ki67_SHM_T2MZP_model_namespace::profiles__;
}

#endif


